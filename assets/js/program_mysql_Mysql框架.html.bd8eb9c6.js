"use strict";(self.webpackChunkxwblog=self.webpackChunkxwblog||[]).push([[6330],{66262:(s,i)=>{i.A=(s,i)=>{const l=s.__vccOpts||s;for(const[s,n]of i)l[s]=n;return l}},78523:(s,i,l)=>{s.exports=l.p+"assets/img/20250815205353.0b38f9c7.png"},44475:(s,i,l)=>{l.r(i),l.d(i,{comp:()=>D,data:()=>T});var n=l(20641);const e=l.p+"assets/img/20250815194104.1d1c26e5.png",t=l.p+"assets/img/20250815210000.d94f8fd6.png",a=l.p+"assets/img/1751712602494.176f23f1.png",r=l.p+"assets/img/1751712994828.fad93d1f.png",o=l.p+"assets/img/20250816110101.cbaf5dd3.png",d=l.p+"assets/img/1751714091090.04410cb8.png",p=l.p+"assets/img/20250816113838.ff6a83f6.png",g=l.p+"assets/img/20250816122626.b9d4c6a2.png",h=l.p+"assets/img/20250816122727.8b5a8c59.png";var c=l(78523);const u=l.p+"assets/img/20250816172222.fbba5399.png",b=l.p+"assets/img/1751714233761.f5ac0e21.png",k=l.p+"assets/img/1751714434412.61e226f5.png",f=l.p+"assets/img/1751714600637.c9aabf81.png",_=l.p+"assets/img/20250816171818.4a611066.png",v=l.p+"assets/img/1751790945089.1a1122d1.png",m=l.p+"assets/img/1751790921127.59b9ccfb.png",A=(0,n.Lk)("h1",{id:"mysql架构",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#mysql架构"},[(0,n.Lk)("span",null,"Mysql架构")])],-1),B=(0,n.Lk)("p",null,"架构组成如此精妙，层层设计深入人心",-1),y=(0,n.Fv)('<h1 id="sever层" tabindex="-1"><a class="header-anchor" href="#sever层"><span>Sever层</span></a></h1><h2 id="_1-server层核心" tabindex="-1"><a class="header-anchor" href="#_1-server层核心"><span>1. server层核心</span></a></h2><h3 id="server-层核心组件与缓存区" tabindex="-1"><a class="header-anchor" href="#server-层核心组件与缓存区"><span>Server 层核心组件与缓存区</span></a></h3><table><thead><tr><th><strong>组件</strong></th><th><strong>功能说明</strong></th><th><strong>缓存/配置参数</strong></th></tr></thead><tbody><tr><td><strong>连接管理器</strong></td><td>管理客户端连接，线程池复用</td><td><code>thread_pool_size</code></td></tr><tr><td><strong>解析器</strong></td><td>SQL → 词法分析 → 语法树</td><td>-</td></tr><tr><td><strong>预处理器</strong></td><td>语义检查、权限验证、<code>*</code>展开</td><td>-</td></tr><tr><td><strong>优化器</strong></td><td>基于成本生成执行计划，索引选择</td><td><code>optimizer_switch</code></td></tr><tr><td><strong>执行器</strong></td><td>调用存储引擎接口执行查询</td><td>-</td></tr><tr><td><strong>表定义缓存</strong></td><td>缓存表结构信息</td><td><code>table_definition_cache</code></td></tr><tr><td><strong>查询结果缓存</strong></td><td><strong>8.0 已移除</strong>（由客户端缓存替代）</td><td>-</td></tr><tr><td><strong>临时表引擎</strong></td><td>内存临时表（<code>TempTable</code>）或磁盘临时表</td><td><code>internal_tmp_mem_storage_engine</code></td></tr><tr><td><strong>Binlog</strong></td><td>Server层日志：逻辑日志，主从复制核心</td><td><code>binlog_cache_size</code></td></tr></tbody></table><h2 id="_2-binlog" tabindex="-1"><a class="header-anchor" href="#_2-binlog"><span>2. Binlog</span></a></h2><h3 id="_2-1-作用" tabindex="-1"><a class="header-anchor" href="#_2-1-作用"><span>2.1 作用</span></a></h3><p>和redolog undolog不同 Binlog却是在Server层存储与实现 这是出于什么考虑呢？</p><p><strong>统一日志管理</strong>：binlog 需要记录所有引擎的数据变更操作（如 INSERT、UPDATE、DELETE 等），而不仅仅是某一引擎的操作。通过将 binlog 放在 Server 层，MySQL 可以统一管理所有存储引擎的操作日志，确保跨引擎的数据一致性和复制能力。</p><p><strong>逻辑与物理分离</strong>：Server 层处理 SQL 的逻辑操作（如 SQL 语句解析后的逻辑结果），而存储引擎（如 InnoDB）记录物理层的页修改（如 redo log）。binlog 作为逻辑日志，更适合在 Server 层实现。</p><p>二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但 不包括数据查询（SELECT、SHOW）语句。</p><p><strong>总结</strong> 将 binlog 设计在 Server 层，是 MySQL 为实现 <strong>跨引擎兼容性</strong>、<strong>统一事务管理</strong>、<strong>主从复制</strong>通用性以及 灵活的逻辑日志能力 做出的重要架构决策。这一设计确保了 MySQL 在复杂场景下的高可用性和扩展性，同时为<strong>数据恢复、审计、大数据同步</strong>等高级功能提供了基础支持。</p><h3 id="_2-2-写入时机" tabindex="-1"><a class="header-anchor" href="#_2-2-写入时机"><span>2.2 写入时机</span></a></h3><p>事务执行过程中，先把日志写到Binlog Cache，事务提交的时候，再把Binlog Cache写到binlog文件中：</p><ul><li><p><strong>Write 操作</strong>：数据写入文件系统的 page cache（内存缓冲区），此时尚未落盘。</p></li><li><p><strong>Fsync 操作</strong>：将 page cache 中的内容强制刷入磁盘，确保持久化</p></li></ul><p>一个事务的binlog是不能被拆开的，因此不论这个事务多大，也要确保一次性写入（因为Binlog写入的单位是Events，一个Events必须包含一个完整的事务，所以这也是大事务造成主从延迟的主要原因）。这就涉及到了Binlog Cache的保存问题。</p><p>系统给Binlog Cache分配了一片内存，<strong>每个线程一个Binlog Cache</strong> 不过他们共享一个Binlog文件，参数binlog_cache_size用于控制单个线程内Binlog Cache所占内存的大小。如果超过了这个参数规定的大小，就要暂存到磁盘。</p><p>事务提交的时候，执行器把Binlog Cache里的完整事务写入到binlog中，并清空Binlog Cache。</p><h3 id="_2-3-关键参数" tabindex="-1"><a class="header-anchor" href="#_2-3-关键参数"><span>2.3 关键参数</span></a></h3><ol><li><p><strong>binlog_cache_size</strong></p><p>设置Binlog Cache的大小，默认大小为8MB，单位：B（字节）。</p></li><li><p><strong>sync_binlog</strong></p><p>控制binlog文件的刷盘策略，可选的参数为0、1或N。</p><ol><li><p><strong>策略一：最佳性能（sync_binlog=0）</strong></p><p>处理过程：表示每次提交事务都只Write，不主动Fsync；</p></li><li><p><strong>策略二：强一致（sync_binlog=1）</strong></p><p>处理过程：表示每次提交事务都会执行Write和Fsync；</p></li><li><p><strong>策略三：人为折衷控制（sync_binlog=N）</strong></p><p><strong>处理过程</strong>：当sync_binlog=N（N&gt;1）的时候，表示每次提交事务都Write，但累积N个事务后才Fsync。 在出现IO瓶颈的场景里，将sync_binlog设置成一个比较大的值，可以提升性能。在实际的业务场景中，考虑到丢失日志量的可控性，一般不建议将这个参数设成0，比较常见的是将其设置为100~1000中的某个数值。但是，将sync_binlog设置为N，对应的风险是：如果主机发生异常重启，会丢失最近N个事务的binlog日志。</p></li></ol></li><li><p><strong>双 1 设置</strong></p><p><strong>innodb_flush_log_at_trx_commit = 1</strong></p><p>​ InnoDB 引擎的 Redo Log 刷盘策略（如设为 1 时，每次事务提交强制 Redo Log 刷盘）</p><p><strong>sync_binlog = 1</strong></p><p>​ 表示每次提交事务都会执行Write和Fsync；</p><p>两者相互搭配可以保障事务一致性</p></li></ol><h3 id="_2-4-数据格式" tabindex="-1"><a class="header-anchor" href="#_2-4-数据格式"><span>2.4 数据格式</span></a></h3><p>MySQL 的 binlog（二进制日志）有三种格式：<strong>Statement</strong>、<strong>Row</strong> 和 <strong>Mixed</strong>。每种格式的日志记录方式和适用场景有所不同，具体对比如下：</p><ol><li><strong>Statement</strong> 格式</li></ol><ul><li>记录方式：直接记录执行的 SQL 语句，例如 INSERT INTO users VALUES (1, &#39;John&#39;) 。</li><li>优点： <ul><li><strong>节省存储空间</strong>：仅记录 SQL 语句，日志量较小。</li><li><strong>高效</strong>：对简单操作（如单行插入、更新）性能较好。</li></ul></li><li>缺点： <ul><li>非确定性操作问题：涉及 NOW()、UUID()、RAND() 等非确定性函数的语句，可能导致主从数据不一致。</li><li>不支持存储过程/触发器的精确重放：复杂逻辑操作可能无法正确复制。</li></ul></li></ul><ol start="2"><li><p><strong>Row</strong> 格式</p><ul><li>记录方式：记录每一行数据的具体变更。例如，更新某条记录时，记录该行修改前后的完整数据。</li><li>优点： <ul><li><strong>数据一致性高</strong>：精准记录行级变更，避免非确定性函数导致的主从差异。</li><li><strong>支持复杂操作</strong>：如存储过程、触发器、临时表等场景的精确重放。</li></ul></li><li>缺点： <ul><li>日志量大：对大批量更新操作（如 ALTER TABLE）会产生海量日志。</li><li>性能开销：写入和同步效率低于 Statement 格式</li></ul></li></ul></li><li><p><strong>Mixed</strong> 格式</p></li></ol><ul><li><p>记录方式：混合模式，默认使用 Statement 格式记录日志，但在以下场景自动切换为 Row 格式：</p><ol><li>涉及 NDB 引擎的表操作。</li><li>使用 UUID()、USER()、RAND() 等非确定性函数。</li><li>包含用户定义函数（UDF）或存储过程。</li><li>使用临时表或自增字段更新。</li><li>执行 INSERT DELAYED 语句。</li></ol></li><li><p>优点：</p><ul><li><strong>灵活性与性能平衡</strong>：在多数简单场景使用 Statement 格式，复杂场景自动切换 Row 格式。</li><li><strong>日志量适中</strong>：相比纯 Row 格式，存储占用更低。</li></ul></li><li><p>缺点：</p><ul><li>配置复杂度高：需理解 MySQL 的切换逻辑，可能出现意外切换导致日志不一致。</li></ul></li></ul><table><thead><tr><th>格式</th><th>记录内容</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>Statement</td><td>SQL 语句</td><td>日志小，性能高</td><td>数据一致性风险</td><td>简单操作、低风险场景</td></tr><tr><td>Row</td><td>行变更数据</td><td>数据安全，支持复杂操作</td><td>日志量大，性能开销高</td><td>高一致性要求的核心业务</td></tr><tr><td>Mixed</td><td>混合动态选择</td><td>灵活平衡性能与数据一致性</td><td>配置复杂，可能意外切换</td><td>多数通用场景</td></tr></tbody></table><h3 id="_2-5-主从复制" tabindex="-1"><a class="header-anchor" href="#_2-5-主从复制"><span>2.5 主从复制</span></a></h3><p>Binlog的关键功能之一</p><figure><img src="'+e+'" alt="1755258085563" tabindex="0" loading="lazy"><figcaption>1755258085563</figcaption></figure><p>从上图来看，复制分成三步：</p><ol><li>Master 主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。</li><li>从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。</li><li>slave重做中继日志中的事件，将改变反映它自己的数据。</li></ol><p>启用主从配置:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">CHANGE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">MASTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MASTER_HOST</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;192.168.200.200&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MASTER_USER</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;itcast&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">MASTER_PASSWORD</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Root@123456&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MASTER_LOG_FILE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;binlog.000004&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">MASTER_LOG_POS</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">663</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数名</th><th>含义</th><th>8.0.23之前</th></tr></thead><tbody><tr><td>SOURCE_HOST</td><td>主库IP地址</td><td>MASTER_HOST</td></tr><tr><td>SOURCE_USER</td><td>连接主库的用户名</td><td>MASTER_USER</td></tr><tr><td>SOURCE_PASSWORD</td><td>连接主库的密码</td><td>MASTER_PASSWORD</td></tr><tr><td>SOURCE_LOG_FILE</td><td>binlog日志文件名</td><td>MASTER_LOG_FILE</td></tr><tr><td>SOURCE_LOG_POS</td><td>binlog日志文件位置</td><td>MASTER_LOG_POS</td></tr></tbody></table><h2 id="_3-sever层优化" tabindex="-1"><a class="header-anchor" href="#_3-sever层优化"><span>3 Sever层优化</span></a></h2><h3 id="_3-1-join-buffer" tabindex="-1"><a class="header-anchor" href="#_3-1-join-buffer"><span>3.1 join_buffer</span></a></h3><ol><li><p>作用与适用场景</p><ul><li><strong>核心功能</strong>：在 JOIN 操作中缓存驱动表的关联数据块，减少对被驱动表的扫描次数，主要用于 Block Nested-Loop Join (BNL) 算法。</li><li><strong>适用场景</strong>： <ul><li>被驱动表无索引或无法利用索引进行关联时。</li><li>多表 JOIN 操作中，需要临时缓存中间结果以减少 I/O 操作。</li></ul></li></ul></li><li><p><strong>工作原理</strong></p><ul><li><strong>缓存流程</strong>： <ol><li>从驱动表（如左表）中读取一批记录（由 join_buffer_size 控制容量）并存入内存。</li><li>全表扫描被驱动表（如右表），将每行数据与缓存块中的记录逐个匹配。</li><li>匹配成功则输出结果，否则继续下一轮缓存块的加载。</li></ol></li><li>算法特点： <ul><li>减少被驱动表的全表扫描次数（从 M 次降低为 M / buffer_size 次）。</li><li>性能优于 Simple Nested-Loop Join，但仍可能引发高内存消耗和磁盘 I/O 问题。</li></ul></li></ul></li><li><p>关键参数与优化</p><ul><li>join_buffer_size： <ul><li>默认值：256KB（8.0 版本后提升至 1MB）。</li><li>调整原则：根据 JOIN 的数据量动态设置。建议： <ul><li>单线程临时调整：SET SESSION join_buffer_size = 8M;</li><li>全局优化：在 my.cnf 中设置为 1M-8M，避免过大导致内存碎片。</li></ul></li></ul></li><li>优化策略： <ul><li><strong>优先使用索引</strong>：为被驱动表的关联字段添加索引，避免 BNL 退化为全表扫描。</li><li><strong>减少 JOIN 表的数据量</strong>：通过 WHERE 条件或子查询缩小驱动表的结果集。</li></ul></li></ul></li></ol><h3 id="_3-2-sort-buffer" tabindex="-1"><a class="header-anchor" href="#_3-2-sort-buffer"><span>3.2 sort_buffer</span></a></h3><p>二、sort_buffer（排序缓存）</p><ol><li>作用与适用场景</li><li><strong>核心功能</strong>：处理 ORDER BY、GROUP BY、DISTINCT 等排序操作，提供内存暂存区。</li><li><strong>适用场景</strong>： <ol><li>无法通过索引直接排序时（执行计划显示 Using filesort）。 2. 排序数据量小于 sort_buffer_size 时，完全内存排序；否则触发磁盘临时文件（外部排序）。</li></ol></li><li>工作原理</li><li><strong>内存排序流程</strong>： <ol><li>从存储引擎读取待排序数据至 sort_buffer。 2. 基于排序字段进行快速排序（单字段）或归并排序（多字段）。 3. 返回有序结果集。 4. 磁盘排序触发条件： 5. 数据量超过 sort_buffer_size。 6. 使用多路归并算法（Sort_merge_passes 记录合并次数），性能显著下降。</li></ol></li><li>关键参数与优化</li><li><strong>sort_buffer_size</strong>： <ol><li>默认值：1MB（生产环境建议调整为 8M-64M）。 2. 调整策略：根据 Sort_merge_passes 监控指标动态调整，若该值频繁增长需增大缓冲区。</li></ol></li><li>其他相关参数： <ol><li>max_sort_length：单行参与排序的最大字节数（默认 1024），避免处理超大字段。 2. tmpdir：指定磁盘临时文件路径，确保足够的存储空间。</li></ol></li><li>优化策略： <ol><li><strong>索引覆盖排序</strong>：通过复合索引实现“无需排序”（执行计划显示 Using index）。 2. <strong>分页优化</strong>：对大数据量排序使用 LIMIT 限制结果集，减少内存占用。</li></ol></li></ol><h1 id="innodb框架" tabindex="-1"><a class="header-anchor" href="#innodb框架"><span>InnoDB框架</span></a></h1><p>让我们来探索一下InnoDB的深奥吧</p><figure><img src="'+t+'" alt="1755258085563" tabindex="0" loading="lazy"><figcaption>1755258085563</figcaption></figure><p>其中左侧为内存结构 右侧为磁盘结构</p><p>画个图 哈哈哈</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+---------------------------------------+</span></span>\n<span class="line"><span>|         应用程序/MySQL Server          |  ←  SQL接口、解析器、优化器等</span></span>\n<span class="line"><span>+---------------------------------------+</span></span>\n<span class="line"><span>                   |</span></span>\n<span class="line"><span>                   ↓</span></span>\n<span class="line"><span>+---------------------------------------+</span></span>\n<span class="line"><span>|             InnoDB 存储引擎            |</span></span>\n<span class="line"><span>| +-----------------+ +---------------+ |</span></span>\n<span class="line"><span>| |  内存结构 (In-Memory Structures)   | |</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| | |        Buffer Pool (缓冲池)     | | |  ← 缓存数据页（核心性能组件）</span></span>\n<span class="line"><span>| | |  +----------------------------+ | | |</span></span>\n<span class="line"><span>| | |  |   Change Buffer (写缓冲)    | | | |  ← 缓存非唯一索引的变更</span></span>\n<span class="line"><span>| | |  +----------------------------+ | | |</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| | |        Log Buffer (日志缓冲)   | | |  ← 临时存储 redo log</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| +-----------------+ +---------------+ |</span></span>\n<span class="line"><span>|                   |                   |</span></span>\n<span class="line"><span>| +-----------------+ +---------------+ |</span></span>\n<span class="line"><span>| | 后台线程 (Background Threads)    | |</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| | | Master Thread (主线程)         | | |  ← 协调刷新、检查点、清理等</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| | | IO Threads (读写线程)          | | |  ← 处理异步IO（read/write）</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| | | Purge Thread (清理线程)        | | |  ← 删除无用的undo日志</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| | | Page Cleaner Thread (刷脏线程)| | |  ← 专用刷脏页线程</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| +-----------------+ +---------------+ |</span></span>\n<span class="line"><span>|                   |                   |</span></span>\n<span class="line"><span>| +-----------------+ +---------------+ |</span></span>\n<span class="line"><span>| |   磁盘结构 (On-Disk Structures)   | |</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| | |      Tablespaces (表空间)      | | |</span></span>\n<span class="line"><span>| | |  +--------------------------+ | | |</span></span>\n<span class="line"><span>| | |  | System Tablespace        | | | |  ← 存储元数据、undo logs、双写缓冲等</span></span>\n<span class="line"><span>| | |  | (ibdata1)                | | | |</span></span>\n<span class="line"><span>| | |  +--------------------------+ | | |</span></span>\n<span class="line"><span>| | |  | File-Per-Table Tablespace| | | |  ← 每个表独立.ibd文件（默认）</span></span>\n<span class="line"><span>| | |  | (.ibd files)             | | | |</span></span>\n<span class="line"><span>| | |  +--------------------------+ | | |</span></span>\n<span class="line"><span>| | |  | General Tablespace       | | | |  ← 用户自定义共享表空间</span></span>\n<span class="line"><span>| | |  +--------------------------+ | | |</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| | |      Redo Log Files          | | |  ← 事务持久性保证（ib_logfile0,1）</span></span>\n<span class="line"><span>| | | (重做日志)                   | | |</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| | |      Undo Logs (回滚日志)     | | |  ← 实现事务回滚/MVCC（存于系统表空间）</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| | |      Doublewrite Buffer      | | |  ← 防止页断裂（存于系统表空间）</span></span>\n<span class="line"><span>| | | (双写缓冲)                   | | |</span></span>\n<span class="line"><span>| | +-------------------------------+ | |</span></span>\n<span class="line"><span>| +-----------------------------------+ |</span></span>\n<span class="line"><span>+---------------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-内存结构" tabindex="-1"><a class="header-anchor" href="#_1-内存结构"><span>1. 内存结构</span></a></h2><h3 id="_1-1-buffer-poll" tabindex="-1"><a class="header-anchor" href="#_1-1-buffer-poll"><span>1.1 Buffer Poll</span></a></h3><figure><img src="'+a+'" alt="1751712602494" tabindex="0" loading="lazy"><figcaption>1751712602494</figcaption></figure><ol><li><p>核心作用</p><ul><li><p><strong>数据缓存</strong>：将磁盘上的数据页（16KB/页）缓存到内存，减少物理 I/O。</p></li><li><p><strong>写缓冲</strong>：延迟非唯一索引的修改操作，合并写入以优化随机 I/O。</p></li></ul></li><li><p><strong>组成结构</strong></p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+</span></span>\n<span class="line"><span>|        Buffer Pool          |</span></span>\n<span class="line"><span>| +-------------------------+ |</span></span>\n<span class="line"><span>| |       Data Pages        | | ← 表数据页（含索引）</span></span>\n<span class="line"><span>| +-------------------------+ |</span></span>\n<span class="line"><span>| |    Change Buffer        | | ← 专用于缓存非唯一索引变更</span></span>\n<span class="line"><span>| +-------------------------+ |</span></span>\n<span class="line"><span>| | Adaptive Hash Index     | | ← 自动为热点页构建哈希索引</span></span>\n<span class="line"><span>| +-------------------------+ |</span></span>\n<span class="line"><span>| |    Free List            | | ← 管理空闲页</span></span>\n<span class="line"><span>| +-------------------------+ |</span></span>\n<span class="line"><span>| |   LRU List (冷热分区)    | | ← 管理已加载页的访问频率</span></span>\n<span class="line"><span>| |   [New Sublist (5/8)]   | | ← 热点数据区（最近访问）</span></span>\n<span class="line"><span>| |   [Old Sublist (3/8)]   | | ← 冷数据区（较早访问）</span></span>\n<span class="line"><span>| +-------------------------+ |</span></span>\n<span class="line"><span>| |   Flush List            | | ← 记录脏页（待刷盘）</span></span>\n<span class="line"><span>| +-------------------------+ |</span></span>\n<span class="line"><span>+-----------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>核心技术细节</strong></p><ul><li><p><strong>页管理机制</strong>：</p><ul><li><strong>LRU List</strong>： <ul><li>传统 LRU 易被全表扫描污染 → InnoDB 将 LRU 分为 <strong>热数据区（5/8）</strong> 和 <strong>冷数据区（3/8）</strong>。</li><li>新页首次加载插入到冷数据区头部，只有<strong>连续访问</strong>后才移至热数据区。</li><li>参数：<code>innodb_old_blocks_pct</code>（冷区比例），<code>innodb_old_blocks_time</code>（冷页晋升热区的等待时间）。</li></ul></li><li><strong>Free List</strong>：管理空闲页，当需要加载新页时从此获取空间。</li><li><strong>Flush List</strong>：按修改时间（LSN）排序的脏页链表，用于刷盘。</li></ul></li><li><p><strong>Change Buffer 写优化</strong>：</p><ul><li>适用场景：仅缓存对 <strong>非唯一索引</strong> 的 <code>INSERT</code>/<code>UPDATE</code>/<code>DELETE</code> 操作（唯一索引需检查唯一性，必须读盘）。</li><li><strong>合并时机</strong>：当相关索引页被加载到 Buffer Pool 时，将 Change Buffer 中的变更合并到页。</li><li><strong>节省 I/O</strong>：例如批量插入时，多次索引修改合并为一次物理写操作。</li><li>参数：<code>innodb_change_buffer_max_size</code>（默认25%，占 Buffer Pool 的比例）。</li></ul></li><li><p><strong>自适应哈希索引（AHI）</strong>：</p><ul><li><strong>原理</strong>：监控频繁访问的索引页，自动为<strong>等值查询</strong>（<code>WHERE key=xxx</code>）构建哈希索引（O(1) 查询）。</li><li><strong>触发条件</strong>：同一索引页被连续访问超过 17 次（可配置）。</li><li>限制：仅支持等值查询，不支持范围扫描。参数：<code>innodb_adaptive_hash_index=ON/OFF</code>。</li></ul></li></ul></li><li><p><strong>关键流程</strong></p><ul><li>数据读取： <ol><li>查询页是否在 Buffer Pool 中（通过表空间ID+页号哈希查找）。</li><li>命中则返回；未命中则从磁盘读入 Free List 的空闲页（若无空闲页，触发 LRU 淘汰）。</li><li>页插入到 LRU 冷数据区头部。</li></ol></li><li>数据修改： <ol><li>修改 Buffer Pool 中的页（标记为脏页）。</li><li>若涉及非唯一索引，操作写入 Change Buffer。</li><li>生成 Redo Log 记录写入 Log Buffer。</li></ol></li><li><strong>刷脏页（Flush）</strong>： <ul><li><strong>触发条件</strong>： <ul><li>Checkpoint 机制（确保 Redo Log 可覆盖）「到此为止的数据已刷盘」（类似快递已送达确认点）。</li><li>空闲页不足（触发 LRU 淘汰脏页）。</li><li>后台线程定时刷新（由 <code>innodb_io_capacity</code> 控制每秒 I/O 量）。</li></ul></li><li><strong>刷盘路径</strong>：脏页通过 Doublewrite Buffer 写入表空间文件（防页断裂）。</li></ul></li></ul></li></ol><p>缓冲池以<strong>Page页为单位</strong>，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型：</p><ul><li>free page：空闲page，未被使用。</li><li>clean page：被使用page，数据没有被修改过。</li><li>dirty page：脏页，被使用page，数据被修改过，也中数据与磁盘的数据产生了不一致。</li></ul><h4 id="_1-1-1-free链表" tabindex="-1"><a class="header-anchor" href="#_1-1-1-free链表"><span>1.1.1 Free链表</span></a></h4><p><strong>作用：管理空闲页，当需要加载新页时从此获取空间。</strong></p><p>当我们最初启动 MySQL 服务器的时候，需要完成对 Buffer Pool 的初始化过程，就是先向操作系统<strong>申请 Buffer Pool 的内存空间</strong>，然后把它划分成若干对控制块和缓存页 。这时候缓存页还没有用上，所以都是空闲页。那么要怎么区分空闲页呢？当然是靠控制块了。</p><p>首先每个控制块都有两个 指针，用来关联空闲的上下两个控制块。innodb再定义了一个free控制块的基点，将所有空闲的控制块串联成双向链表，称为free链表。</p><p>有了这个 free链表 之后事儿就好办了，每当需要从磁盘中加载一个页到 Buffer Pool 中时，就从 free链表 中 取一个空闲的缓存页，并且把该缓存页对应的 控制块 的信息填上（就是该页所在的表空间、页号之类的信 息），然后把该缓存页对应的 free链表 节点从链表中移除，表示该缓存页已经被使用了～</p><p>注意：free的基点不占用bufferpool的内存空间</p><h4 id="_1-1-2-flush链表" tabindex="-1"><a class="header-anchor" href="#_1-1-2-flush链表"><span>1.1.2 Flush链表</span></a></h4><p><strong>作用：按修改时间（LSN）排序的脏页链表，用于刷盘。</strong></p><p>如果我们修改了 Buffer Pool 中某个缓存页的数据，那它就和磁盘上的页不一致了，这样的缓存页也被称为 脏页（英文名： dirty page ） 。这些脏页不会急着加载进磁盘，会等一段时间，有可能一个页累计了好多次的修改，统一刷进磁盘，称为刷脏。问题来了，<strong>怎么知道哪些页是脏页</strong>？</p><p>我们依然维护了一个flush链表的基点，然后控制块也多维护了两个flush的指针，所有被修改过的页，都会加进flush链表。在未来的某个时间段，被我们的后台线程异步的刷进磁盘。</p><h4 id="_1-1-3-lru链表" tabindex="-1"><a class="header-anchor" href="#_1-1-3-lru链表"><span>1.1.3 LRU链表</span></a></h4><p><strong>作用：管理已加载页的访问频率</strong></p><p>传统的LRU机制 在Buffer Pool快要满了的时候 就会移除一些页 通过LRU算法实现，但是传统的LRU存在一些问题</p><ul><li>对于开启<strong>预读</strong>的Mysql 会在加载连续页 或者区的时候 异步的把剩余的一些页或者区也读出来 （实际没用）从而浪费缓存</li><li>针对没有索引的数据 每次访问会<strong>全表扫描</strong> 导致数据大量被放在缓冲区占用缓存区内存</li></ul><p>因此对其进行了优化将其分为两个部分：一部分<strong>叫热区young区</strong>，一部分叫<strong>冷区old区</strong>。</p><p>默认情况下， old 区域大约占 LRU链 表 的 3/8 。这个比例我们是可以设置的，我们可以在启动时修改 innodb_old_blocks_pct 参数来控制 old 区域 在 LRU链表 中所占的比例，比方说这样修改配置文件： [server] innodb_old_blocks_pct = 40</p><ul><li>针对预读的页面在初次加载进缓存的时候，就在冷区的头部，后续有被访问，才会到热区</li><li>针对于全表扫描这类，页面一开始放到了冷区，紧接着就会马上被读到，重新进入了热区，怎么办？mysql提供了一个参数 innodb_old_blocks_time 说的是，在加载进缓存页后的多少秒，再次访问，才能把页面变到热区，正是用了冷热区，加上innodb_old_blocks_time 这个参数，才解决了头疼的问题。</li><li>针对于热区的缓存页，每次被访问就移到头结点也太累了，mysql还给它优化了一下，只有在热区尾部四分之一的位置时，才需要去移动。</li></ul><h4 id="_1-1-4-change-buffer" tabindex="-1"><a class="header-anchor" href="#_1-1-4-change-buffer"><span>1.1.4 Change Buffer</span></a></h4><figure><img src="'+r+'" alt="1751712994828" tabindex="0" loading="lazy"><figcaption>1751712994828</figcaption></figure><p>Change Buffer，<strong>更改缓冲区（针对于非唯一二级索引页）</strong>，在执行DML语句时，如果这些数据Page 没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区 Change Buffer中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到磁盘中。</p><p>Change Buffer的意义是什么呢?</p><p>先来看一幅图，这个是二级索引的结构图：</p><figure><img src="'+o+'" alt="1755258085563" tabindex="0" loading="lazy"><figcaption>1755258085563</figcaption></figure><p>与聚集索引不同，二级索引通常是非唯一的，并且以相对随机的顺序插入二级索引。同样，删除和更新</p><p>可能会影响索引树中不相邻的二级索引页，如果每一次都操作磁盘，会造成大量的磁盘IO。有了</p><p>ChangeBuffer之后，我们可以在缓冲池中进行<strong>合并处理，减少磁盘IO</strong>。</p><p><strong>工作流程详解</strong></p><p>Change Buffer 的工作流程可分为<strong>操作暂存、合并（Merge）、持久化</strong>三个阶段：</p><ol><li><p><strong>操作暂存阶段</strong></p></li><li><p><strong>判断条件</strong>：</p></li></ol><pre><code>- 用户发起对二级索引的数据变更操作（如插入/更新/删除）。  \n- InnoDB 检查目标数据页是否在 Buffer Pool 中：  \n  - **若在内存中**：直接修改数据页，无需 Change Buffer。  \n  - **若不在内存中**：将操作记录到 Change Buffer，并生成对应的 Redo Log 保证事务持久性。\n</code></pre><ol start="2"><li><strong>合并（Merge）阶段</strong></li></ol><p>合并操作将 Change Buffer 中的变更应用到数据页，触发条件包括：</p><ul><li><strong>主动读取数据页</strong>：当后续查询需要访问该数据页时，系统将数据页加载到 Buffer Pool 并合并缓存的变更。</li><li><strong>后台线程定期合并</strong>：InnoDB 的主线程（Master Thread）每隔 10 秒执行一次 Merge 操作。</li><li><strong>数据库关闭时</strong>：确保所有变更持久化到磁盘。</li></ul><ol start="3"><li><strong>持久化阶段</strong></li></ol><ul><li>Change Buffer 本身是可持久化的，其数据结构（B+ 树）存储在系统表空间（ibdata1）中，通过 Checkpoint 机制定期刷盘。</li><li>变更操作最终通过 Redo Log 和 InnoDB 的脏页刷新机制写入磁盘索引页。</li></ul><h4 id="_1-1-5-自适应哈希索引-ahi" tabindex="-1"><a class="header-anchor" href="#_1-1-5-自适应哈希索引-ahi"><span>1.1.5 自适应哈希索引（AHI）</span></a></h4><p><strong>作用：自动为热点页构建哈希索引加快访问速度</strong></p><p>自适应hash索引，用于优化对Buffer Pool数据的查询。MySQL的innoDB引擎中虽然没有直接支持</p><p>hash索引，但是给我们提供了一个功能就是这个自适应hash索引。因为前面我们讲到过，hash索引在</p><p>进行等值匹配时，一般性能是要高于B+树的，因为hash索引一般只需要一次IO即可，而B+树，可能需</p><p>要几次匹配，所以hash索引的效率要高，但是hash索引又不适合做范围查询、模糊匹配等。</p><p>InnoDB存储引擎会监控对表上各索引页的查询，如果观察到在特定的条件下比如<strong>等值查询</strong>达到一定次数（可设置）17次 为其建立自适应hash索引 ，但是<strong>不支持对范围查找</strong>建立。</p><p><strong>自适应哈希索引，无需人工干预，是系统根据情况自动完成。</strong></p><p>参数： adaptive_hash_index</p><h3 id="_1-2-log-buffer" tabindex="-1"><a class="header-anchor" href="#_1-2-log-buffer"><span>1.2 Log Buffer</span></a></h3><figure><img src="'+d+'" alt="1751714091090" tabindex="0" loading="lazy"><figcaption>1751714091090</figcaption></figure><ol><li><p>核心作用</p><ul><li><strong>Redo Log 的缓冲区</strong>：临时存储事务产生的 <strong>Redo</strong> 日志（避免每次提交直接写磁盘）。</li><li><strong>批量 I/O 优化</strong>：合并多个事务的日志写入，减少磁盘操作次数。</li></ul></li><li><p>组成结构</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+-----------------------------+</span></span>\n<span class="line"><span>|         Log Buffer         |</span></span>\n<span class="line"><span>| +-------------------------+ |</span></span>\n<span class="line"><span>| |   Redo Log Records      | | ← 按事务提交顺序存储</span></span>\n<span class="line"><span>| |   [Tx1: UPDATE ...]     | |</span></span>\n<span class="line"><span>| |   [Tx2: INSERT ...]     | |</span></span>\n<span class="line"><span>| +-------------------------+ |</span></span>\n<span class="line"><span>+-----------------------------+</span></span>\n<span class="line"><span>         ↓</span></span>\n<span class="line"><span>+-----------------------------+</span></span>\n<span class="line"><span>|      Redo Log Files        |</span></span>\n<span class="line"><span>|    (ib_logfile0, ib_logfile1) | ← 循环写入的磁盘文件</span></span>\n<span class="line"><span>+-----------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>核心技术细节</strong></p><ul><li><p><strong>Redo Log 内容</strong>：</p><ul><li>记录<strong>物理逻辑日志</strong>：如 “在 Page X 的 Offset Y 写入 Z 字节数据”。</li><li>仅记录索引页的修改，不记录二进制变更（区别于 Binlog）。</li></ul></li><li><p><strong>写入与刷盘策略</strong>：</p><ul><li><strong>写入时机</strong>：事务执行过程中，Redo Log 实时写入 Log Buffer。</li><li><strong>刷盘时机</strong>（由 <code>innodb_flush_log_at_trx_commit</code> 控制）：</li></ul><table><thead><tr><th><strong>参数值</strong></th><th><strong>行为</strong></th><th><strong>可靠性</strong></th><th><strong>性能</strong></th></tr></thead><tbody><tr><td><strong>0</strong></td><td>每秒刷盘一次</td><td>最低</td><td>最高</td></tr><tr><td><strong>1</strong></td><td>每次事务提交时刷盘（默认）</td><td>最高</td><td>最低</td></tr><tr><td><strong>2</strong></td><td>提交时写入 OS 缓存，每秒刷盘</td><td>中等</td><td>中等</td></tr></tbody></table></li><li><p>Log Buffer 大小：</p><ul><li>参数 <code>innodb_log_buffer_size</code>（默认 16MB）。</li><li>建议调整场景：大事务或高并发写入时，避免 Log Buffer 满导致额外刷盘。</li></ul></li></ul></li><li><p>关键流程</p><ul><li><p><strong>事务执行</strong>：</p><ul><li>数据修改 → 生成 Redo Log 记录 → 存入 Log Buffer。</li></ul></li><li><p><strong>事务提交</strong>：</p><ul><li>根据 <code>innodb_flush_log_at_trx_commit</code> 决定是否强制刷盘： <ul><li>若为 <strong>1</strong>：调用 <code>fsync()</code> 将 Log Buffer 中的该事务日志写入 Redo Log 文件。</li><li>若为 <strong>2</strong>：仅写入 OS 文件系统缓存（可能丢失最近1秒数据）。</li></ul></li></ul></li><li><p><strong>后台刷盘</strong>：</p><ul><li>Master Thread 每秒自动刷盘（无论参数为何值）。</li></ul></li><li><p><strong>日志文件循环</strong>：</p><p>Redo Log 文件写满后，触发 Checkpoint → 将脏页刷盘 → 重用旧日志文件。</p></li></ul></li></ol><h4 id="_1-2-1-buffer-poll与log-buffer协同" tabindex="-1"><a class="header-anchor" href="#_1-2-1-buffer-poll与log-buffer协同"><span>1.2.1 Buffer Poll与Log Buffer协同</span></a></h4><ol><li><strong>数据加载</strong>： <ul><li>从磁盘读取目标页到 Buffer Pool（若未缓存）。</li></ul></li><li><strong>修改数据</strong>： <ul><li>在 Buffer Pool 中修改页 → 标记为脏页 → 加入 Flush List。</li><li>若修改非唯一索引 → 写入 Change Buffer。</li></ul></li><li><strong>生成日志</strong>： <ul><li>生成 Redo Log 记录 → 写入 Log Buffer。</li></ul></li><li><strong>事务提交</strong>： <ul><li>根据策略刷 Log Buffer 到磁盘（Redo Log Files）。</li></ul></li><li><strong>后台刷脏</strong>： <ul><li>Page Cleaner Thread 异步将脏页刷盘（通过 Doublewrite Buffer 保证安全）。</li></ul></li></ol><blockquote><p>⚙️ <strong>关键设计思想</strong>：</p><ul><li><strong>日志先行（WAL）</strong>：Redo Log 先于数据页落盘，确保崩溃恢复能力。</li><li><strong>批量处理</strong>：Log Buffer 合并日志写，Change Buffer 合并索引更新，最大化 I/O 效率。</li><li><strong>内存优先</strong>：Buffer Pool 减少读 I/O，Log Buffer 优化写 I/O。</li></ul></blockquote><h2 id="_2-后台线程" tabindex="-1"><a class="header-anchor" href="#_2-后台线程"><span>2. 后台线程</span></a></h2><h3 id="_2-1-master-thread-主线程" tabindex="-1"><a class="header-anchor" href="#_2-1-master-thread-主线程"><span>2.1 Master Thread（主线程）</span></a></h3><p>Master Thread 是 InnoDB 存储引擎的核心调度线程，负责协调其他后台线程的工作，并执行关键的数据持久化任务，确保内存与磁盘数据的同步以及事务的一致性。其设计体现了 InnoDB 在高并发、高可靠场景下的核心逻辑。</p><figure><img src="'+p+'" alt="1755258085563" tabindex="0" loading="lazy"><figcaption>1755258085563</figcaption></figure><p><strong>1. 核心职责</strong></p><ol><li><strong>异步数据刷新</strong><ol><li><strong>脏页刷新</strong>：定期将 Buffer Pool 中修改过的脏页（Dirty Page）刷新到磁盘，保证内存与磁盘数据的一致性。</li><li><strong>日志缓冲刷新</strong>：将 Redo Log Buffer 中的日志内容刷新到磁盘的 Redo Log 文件，确保事务的持久性（ACID 中的 Durability）。</li></ol></li><li><strong>合并插入缓冲（Insert Buffer Merge）</strong><ul><li>对非唯一二级索引的变更（INSERT/UPDATE/DELETE）进行合并优化，减少随机 I/O 操作。仅当系统 I/O 压力较小时触发（如每秒 I/O 次数 &lt; 5）。</li></ul></li><li><strong>事务与 Undo 管理</strong><ul><li><strong>Undo 页回收</strong>：清理已提交事务的 Undo 日志，释放空间供后续事务使用。</li><li><strong>检查点（Checkpoint）</strong>：触发模糊检查点（Fuzzy Checkpoint），将部分脏页写入磁盘，控制 Redo Log 文件的复用。</li></ul></li></ol><p><strong>2. 关键技术</strong>：</p><ul><li><strong>自适应刷新</strong>：根据脏页比例（<code>innodb_max_dirty_pages_pct</code>）和 I/O 能力（<code>innodb_io_capacity</code>）动态调整刷盘速度。</li><li><strong>Checkpoint 机制</strong>： <ul><li>定期将最老的脏页 LSN（Log Sequence Number）标记为检查点</li><li>确保 Redo Log 可安全覆盖（崩溃恢复起始点）</li></ul></li><li><strong>压力传导</strong>：当用户线程需要空闲页时，Master Thread 会被唤醒加速刷脏。</li></ul><p><strong>3. 工作流程</strong></p><p>Master Thread 的运行由多个循环构成，通过休眠与唤醒机制平衡性能与资源消耗：</p><ol><li><p><strong>主循环</strong>（Main Loop）</p><ol><li><strong>每秒操作</strong>： <ul><li>强制刷新 Redo Log Buffer 到磁盘，无论事务是否提交（确保崩溃恢复能力）。</li><li>合并插入缓冲：根据 I/O 压力动态判断是否执行。</li><li>脏页刷新：若脏页比例超过阈值（innodb_max_dirty_pages_pct，默认 75%），刷新至多 100 个脏页。</li></ul></li><li><strong>每 10 秒操作</strong>： <ul><li>脏页刷新：强制刷新 100 个脏页（即使未达阈值）。</li><li>删除无用的 Undo 页，防止 Undo 表空间膨胀。</li><li>合并插入缓冲：强制合并 5 个操作。</li></ul></li></ol></li><li><p><strong>后台循环</strong>（Background Loop）</p><p>当无用户活动时，进入低优先级模式，执行轻量级任务（如 I/O 合并），减少 CPU 占用。</p></li></ol><h3 id="_2-2-io-threads-i-o-线程" tabindex="-1"><a class="header-anchor" href="#_2-2-io-threads-i-o-线程"><span>2.2 IO Threads（I/O 线程）</span></a></h3><p><strong>核心作用</strong>：处理所有异步磁盘 I/O，避免用户线程阻塞。</p><p>🔧 线程分类与运作：</p><table><thead><tr><th><strong>线程类型</strong></th><th><strong>数量参数</strong></th><th><strong>处理内容</strong></th><th><strong>触发时机</strong></th></tr></thead><tbody><tr><td><strong>Read Thread</strong></td><td><code>innodb_read_io_threads</code></td><td>数据页预读/随机读请求</td><td>用户查询触发预读或缓存未命中</td></tr><tr><td><strong>Write Thread</strong></td><td><code>innodb_write_io_threads</code></td><td>脏页刷盘、Change Buffer 合并写入</td><td>Page Cleaner 提交刷盘任务</td></tr><tr><td><strong>Log Thread</strong></td><td>1 (固定)</td><td>Redo Log 缓冲刷盘</td><td>事务提交或每秒刷新</td></tr></tbody></table><p>关键技术：</p><ul><li><strong>异步 I/O 封装</strong>： <ul><li>Linux 使用 <code>libaio</code>，Windows 使用 Overlapped I/O</li><li>通过 <code>io_submit()</code> 批量提交 I/O 请求</li></ul></li><li><strong>负载均衡</strong>：多个文件时采用轮询分配（<code>innodb_file_per_table</code> 场景）</li></ul><p><strong>读线程（Read Threads）</strong>：负责将磁盘数据页异步加载到缓冲池（Buffer Pool），减少用户线程因等待磁盘 I/O 而阻塞</p><p><strong>写线程（Write Threads）</strong>：将缓冲池中的脏页（Dirty Pages）异步刷新到磁盘，确保数据持久性</p><p><strong>日志线程（Log Threads）</strong>：将重做日志缓冲（Redo Log Buffer）异步写入磁盘的重做日志文件，支持事务的 ACID 特性，确保事务提交前日志持久化</p><h3 id="_2-3-page-cleaner-thread-刷脏线程" tabindex="-1"><a class="header-anchor" href="#_2-3-page-cleaner-thread-刷脏线程"><span>2.3 Page Cleaner Thread（刷脏线程）</span></a></h3><p><strong>核心作用</strong>：<strong>专职刷脏页</strong>（MySQL 5.6+ 从 Master Thread 拆分）。</p><figure><img src="'+g+'" alt="1755258085563" tabindex="0" loading="lazy"><figcaption>1755258085563</figcaption></figure><p><strong>一、核心功能</strong></p><ol><li><p><strong>异步脏页刷新</strong></p><ul><li><strong>作用</strong>：将 Buffer Pool 中已修改但未写入磁盘的脏页按策略刷新到数据文件，确保内存与磁盘数据一致性。</li><li><strong>优化点</strong>：通过批量刷新减少磁盘 I/O 次数，避免主线程（Master Thread）因同步刷盘导致性能抖动 。</li></ul></li><li><p><strong>动态负载均衡</strong></p><ul><li><strong>自适应调节</strong>：根据系统负载（如 IOPS、脏页比例）动态调整刷新频率。当 <code>innodb_max_dirty_pages_pct</code>（默认 75%）阈值被突破时，主动触发大规模脏页刷新。</li><li><strong>优先级策略</strong>：优先刷新即将被淘汰的 LRU（Least Recently Used）页，避免因内存不足导致用户查询阻塞。</li></ul></li><li><p><strong>协作机制</strong></p><ul><li><strong>与 Master Thread 联动</strong>：接收主线程周期性任务调度（如每秒/每十秒刷新指令），同时分担其脏页管理职责。</li><li><strong>与 I/O Threads 协作</strong>：通过异步 I/O 线程将脏页写入磁盘，避免阻塞主线程</li></ul></li></ol><p><strong>二、工作流程</strong></p><p><strong>触发条件</strong></p><ol><li><strong>阈值触发</strong></li></ol><ul><li><ul><li><strong>脏页比例超限</strong>：当 Buffer Pool 中脏页占比超过 <code>innodb_max_dirty_pages_pct</code>（默认 75%）时强制刷新。</li><li><strong>Redo Log 空间不足</strong>：当 Redo Log 即将被写满时，通过检查点（Checkpoint）机制触发快速刷盘，确保日志可循环复用。</li></ul></li></ul><ol><li><strong>周期性调度</strong></li></ol><ul><li><ul><li><strong>主线程协调</strong>：Master Thread 每秒检查脏页状态并分配刷新任务给 Page Cleaner。</li><li><strong>空闲时段刷新</strong>：系统负载较低时，利用空闲 I/O 带宽完成增量刷新。</li></ul></li></ul><p><strong>执行阶段</strong></p><ol><li><strong>脏页收集</strong></li></ol><ul><li><ul><li><strong>扫描 Buffer Pool</strong>：从 LRU 链表或 Flush List 中筛选待刷新脏页，按修改时间（LSN）排序以减少随机 I/O。</li></ul></li></ul><ol><li><strong>批量写入调度</strong></li></ol><ul><li><ul><li><strong>分批次刷新</strong>：根据 <code>innodb_io_capacity</code> 参数（默认 200）控制每批次刷新的最大页数，避免突发 I/O 压力。</li><li><strong>异步 I/O 提交</strong>：通过预分配的 Write Threads 将脏页写入磁盘，支持并发操作以利用多核 CPU。</li></ul></li></ul><ol><li><strong>检查点更新</strong></li></ol><ul><li><ul><li><strong>LSN 推进</strong>：刷新完成后更新 Checkpoint LSN，标识已持久化的日志位置，缩短崩溃恢复时间。</li></ul><p>三、MySQL 8.0+ 优化特性</p></li></ul><ol><li><strong>多线程并行处理</strong></li></ol><ul><li><ul><li>通过 <code>innodb_page_cleaners</code> 参数（默认 4）设置多个刷脏线程，每个线程负责一个 Buffer Pool 实例，提升并行效率。</li></ul></li></ul><ol><li><strong>自适应刷新算法</strong></li></ol><ul><li><ul><li>结合历史 I/O 负载预测未来需求，动态调整刷新速率，避免因过度刷盘导致性能波动。</li></ul></li></ul><ol><li><strong>原子写入支持</strong></li></ol><ul><li><ul><li>启用 16K 原子写技术后，关闭双写缓冲（Double Write Buffer），直接通过硬件保证页写入完整性，减少 I/O 开销。</li></ul></li></ul><p><strong>Page Cleaner Thread 是策略的制定者 负责高效的调度 扫描选择脏页 生成任务队列 真正执行脏页刷新磁盘的是 上面提到的io（Write Threads）线程</strong></p><h3 id="_2-4-purge-thread-清理线程" tabindex="-1"><a class="header-anchor" href="#_2-4-purge-thread-清理线程"><span>2.4 Purge Thread（清理线程）</span></a></h3><p>Purge Thread（清理线程） 是 InnoDB 存储引擎用于回收历史数据、释放存储空间并维护事务一致性的核心后台线程</p><figure><img src="'+h+'" alt="1755258085563" tabindex="0" loading="lazy"><figcaption>1755258085563</figcaption></figure><p><strong>1. 核心功能</strong></p><ol><li><strong>回收 Undo 日志</strong></li></ol><ul><li><ul><li>当事务执行 <code>UPDATE</code> 或 <code>DELETE</code> 操作时，InnoDB 不会立即物理删除数据，而是将旧版本数据存入 Undo 日志。Purge Thread 负责在这些数据不再被任何事务（包括读视图）引用后，清理对应的 Undo 页，释放空间。</li></ul></li></ul><ol start="2"><li><strong>清理历史版本数据</strong></li></ol><ul><li><ul><li>支持事务的多版本并发控制（MVCC），Purge Thread 移除已提交事务不再需要的旧数据版本，避免数据膨胀，优化查询性能。</li></ul></li></ul><ol start="3"><li><strong>优化存储效率</strong></li></ol><ul><li><ul><li>定期清理标记为删除（<code>delete mark</code>）的数据行，减少表碎片，提升磁盘空间利用率。</li></ul></li></ul><ol start="4"><li><strong>多线程协作</strong></li></ol><ul><li><ul><li>在 MySQL 5.7.8+ 后，Purge Thread 采用多线程架构（协调线程 + 工作线程），提升并发处理能力。默认配置为 4 个线程（1 个协调线程 + 3 个工作线程），可通过 <code>innodb_purge_threads</code> 调整。</li></ul></li></ul><p><strong>2. 工作流程</strong></p><p>触发条件</p><ol><li><strong>事务提交后</strong></li></ol><ul><li><ul><li>当事务提交后，其产生的 Undo 日志会被标记为可清理状态，但需确保无活跃事务依赖该数据版本。</li></ul></li></ul><ol start="2"><li><strong>系统负载空闲时</strong></li></ol><ul><li><ul><li>在低 I/O 负载时，Purge Thread 主动清理历史数据，避免影响正常事务处理。</li></ul></li></ul><ol start="3"><li><strong>强制清理阈值</strong></li></ol><ul><li><ul><li>当 Undo 表空间使用量超过阈值（由 <code>innodb_max_undo_log_size</code> 控制）或表空间不足时触发强制清理。</li></ul></li></ul><p><strong>3. 执行流程</strong></p><ol><li>历史列表（History List）管理</li></ol><ul><li><ul><li>InnoDB 维护一个全局的 <strong>历史列表（History List）</strong>，记录所有待清理的旧数据版本。协调线程定期扫描该列表，将任务分发给工作线程。</li></ul></li></ul><ol start="2"><li>任务分发与并行处理</li></ol><ul><li><ul><li><strong>协调线程（Coordinator Thread）</strong>：负责分配待清理的 Undo 段，并监控工作线程状态。</li><li><strong>工作线程（Worker Thread）</strong>：执行具体的清理操作，包括删除旧数据行、回收 Undo 页等。每个工作线程独立处理分配的 Undo 段，避免锁争用。</li></ul></li></ul><ol start="3"><li>清理阶段</li></ol><ul><li><ul><li><strong>阶段1（Purge Batch）</strong>：批量处理一组 Undo 记录，确保高效性。</li><li><strong>阶段2（Truncate Undo Log）</strong>：当 Undo 表空间空闲比例较高时，触发 <code>TRUNCATE UNDO LOG</code>，释放物理文件空间。</li></ul></li></ul><ol start="4"><li>动态调节机制</li></ol><ul><li><ul><li>根据系统负载自动调整工作线程数量。例如，高并发时增加线程数，空闲时减少以节省资源。</li></ul></li></ul><p><strong>4. 性能调优参数</strong></p><table><thead><tr><th><strong>参数</strong></th><th><strong>作用</strong></th><th><strong>建议值</strong></th></tr></thead><tbody><tr><td><code>innodb_purge_threads</code></td><td>控制 Purge Thread 总数（默认 4）</td><td>高并发场景可增至 8-16</td></tr><tr><td><code>innodb_max_undo_log_size</code></td><td>设置单个 Undo 表空间的最大大小（默认 1G）</td><td>根据磁盘容量调整</td></tr><tr><td><code>innodb_purge_batch_size</code></td><td>每批次处理的 Undo 记录数（默认 300）</td><td>可适当增大以提升吞吐量</td></tr></tbody></table><p><strong>5. 与其他线程的协作</strong></p><ul><li><strong>Master Thread</strong>：接收周期性任务指令（如每秒/每十秒触发检查点），协调 Purge Thread 优先级 。</li><li><strong>Page Cleaner Thread</strong>：清理脏页时可能触发关联 Undo 数据的回收。</li><li><strong>I/O Threads</strong>：异步写入清理后的数据变更，减少主线程阻塞。</li></ul><h3 id="_2-5-线程之间的协同" tabindex="-1"><a class="header-anchor" href="#_2-5-线程之间的协同"><span>2.5 线程之间的协同</span></a></h3><p><strong>线程协同工作原理（以 UPDATE 为例）</strong></p><ol><li><strong>用户线程</strong>： <ul><li>修改 Buffer Pool 数据页 → 生成 Redo Log 写入 Log Buffer</li></ul></li><li><strong>Log Thread</strong>： <ul><li>事务提交时将 Log Buffer 刷盘（若 <code>innodb_flush_log_at_trx_commit=1</code>)</li></ul></li><li><strong>Page Cleaner Thread</strong>： <ul><li>异步将脏页通过 Doublewrite Buffer 刷入表空间文件</li></ul></li><li><strong>Purge Thread</strong>： <ul><li>事务提交后清理该事务的 Undo Log 历史版本</li></ul></li><li><strong>Master Thread</strong>： <ul><li>每秒调度全局任务，推进 Checkpoint LSN</li></ul></li></ol><p>⚠️ <strong>设计精髓</strong>：</p><ul><li><strong>并行化</strong>：将 I/O、Purge、刷脏分离到独立线程，充分利用多核 CPU</li><li><strong>异步化</strong>：用户线程几乎不直接操作磁盘，通过后台线程延迟处理</li><li><strong>自适应</strong>：根据系统负载动态调整资源分配（如刷脏速度）</li></ul><h2 id="_3-磁盘结构" tabindex="-1"><a class="header-anchor" href="#_3-磁盘结构"><span>3. 磁盘结构</span></a></h2><h3 id="_3-1-表空间-tablespaces" tabindex="-1"><a class="header-anchor" href="#_3-1-表空间-tablespaces"><span>3.1 表空间（Tablespaces）</span></a></h3><ol><li><p>核心作用</p><ul><li><strong>数据持久化存储</strong>：所有用户数据、索引、元数据、系统数据的最终存储容器</li><li><strong>空间管理单元</strong>：InnoDB 存储引擎的最高层逻辑存储结构（段→区→页→行）</li><li><strong>多模式支持</strong>：提供系统表空间、独立表空间、通用表空间等多种存储策略</li></ul></li><li><p>组成结构</p></li></ol><figure><img src="'+c+'" alt="1755258085563" tabindex="0" loading="lazy"><figcaption>1755258085563</figcaption></figure><ol><li><p>表空间</p><p>表空间是InnoDB存储引擎逻辑结构的最高层， 如果用户启用了参数 innodb_file_per_table(在 8.0版本中默认开启) ，则每张表都会有一个表空间（xxx.ibd），一个mysql实例可以对应多个表空 间，用于存储记录、索引等数据。</p></li><li><p>段</p><p>分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollbacksegment），InnoDB是索引组织表，数据段就是B+树的叶子节点， 索引段即为B+树的 非叶子节点。段用来管理多个Extent（区）。 按功能划分存储单元，例如一个索引对应两个段（叶子段+非叶子段）；段空间管理采用INODE Entry结构（存储于系统表空间）</p></li><li><p>区</p><p>表空间的单元结构，<strong>连续的64个页</strong>，默认大小1MB（页大小16KB×64）。一次分配4-5个区，避免频繁申请碎片化，提升I/O连续性</p></li><li><p>页</p><p>页，是InnoDB 存储引擎磁盘管理的<strong>最小单元</strong>，每个页的大小默认为 16KB。为了保证页的连续性， InnoDB 存储引擎每次从磁盘申请 4-5 个区。</p></li><li><p>行</p><p>行，InnoDB 存储引擎数据是按行进行存放的。</p><p>在行中，默认有两个隐藏字段：</p><p>​ <strong>Trx_id</strong>：每次对某条记录进行改动时，都会把对应的事务id赋值给trx_id隐藏列。</p><p>​ <strong>Roll_pointer</strong>：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个</p><p>​ 隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</p></li><li><p><strong>组成分类</strong></p></li></ol><figure><img src="'+u+'" alt="1755258085563" tabindex="0" loading="lazy"><figcaption>1755258085563</figcaption></figure><ul><li>系统表空间 (System Tablespace)</li><li>独立表空间 (File-Per-Table Tablespace)</li><li>通用表空间 (General Tablespace)</li><li>撤销表空间 (Undo Tablespaces)</li><li>临时表空间 (Temporary Tablespace)</li><li>其他表空间</li></ul><p><strong>表空间类型对比表</strong></p><table><thead><tr><th>特性</th><th>系统表空间</th><th>独立表空间</th><th>通用表空间</th><th>撤销表空间</th><th>临时表空间</th></tr></thead><tbody><tr><td><strong>存储内容</strong></td><td>系统数据</td><td>单表数据</td><td>多表数据</td><td>Undo日志</td><td>临时数据</td></tr><tr><td><strong>文件扩展名</strong></td><td>.ibdata</td><td>.ibd</td><td>.ibd</td><td>.ibu</td><td>.ibt</td></tr><tr><td><strong>是否共享</strong></td><td>是</td><td>否</td><td>是</td><td>是</td><td>会话级</td></tr><tr><td><strong>默认数量</strong></td><td>1</td><td>每表1个</td><td>用户创建</td><td>2</td><td>1主+多会话</td></tr><tr><td><strong>可收缩</strong></td><td>❌</td><td>✅</td><td>✅</td><td>✅</td><td>✅(重启)</td></tr><tr><td><strong>8.0改进</strong></td><td>Undo移出</td><td>默认启用</td><td>增强</td><td>独立+动态</td><td>会话级优化</td></tr><tr><td><strong>最佳实践</strong></td><td>仅系统数据</td><td>推荐大多数表</td><td>表组管理</td><td>自动管理</td><td>监控大小</td></tr></tbody></table><h4 id="_3-1-1-系统表空间-system-tablespace" tabindex="-1"><a class="header-anchor" href="#_3-1-1-系统表空间-system-tablespace"><span>3.1.1 系统表空间 (System Tablespace)</span></a></h4><figure><img src="'+b+'" alt="1751714233761" tabindex="0" loading="lazy"><figcaption>1751714233761</figcaption></figure><ul><li><p><strong>作用</strong>：系统表空间主要用于存储数据字典信息，比如表结构、索引结构这些元数据，这能让数据库快速准确地知道每张表的结构和相关属性。而且，回滚段也可能存储在系统表空间里，回滚段对事务处理很重要，比如在事务回滚时能恢复数据到原来状态。</p></li><li><p>文件标识：<code>ibdata1</code>（默认名称）</p></li><li><p>核心组成：包含数据字典（表结构等元数据）、Undo日志（回滚段）、双写缓冲（Doublewrite Buffer）、</p><p>Change Buffer（修改缓冲）等核心信息。即使启用了独立表空间，这些全局数据仍存储在此</p><ul><li><strong>数据字典</strong>：存储数据库对象元数据（表、列、索引等定义）</li><li><strong>双写缓冲区</strong>：防止页断裂的备份区域（8.0.20+可独立）</li><li><strong>变更缓冲区</strong>：缓存对非唯一索引的更改</li><li><strong>系统回滚段</strong>：用于系统事务的撤销日志存储</li></ul></li><li><p>使用时机：</p><ul><li>存储MySQL内部系统数据（如数据字典）</li><li>当未启用独立表空间（<code>innodb_file_per_table=OFF</code>）时存储所有用户数据（<strong>不推荐</strong>）</li></ul></li><li><p>关键特性：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 配置文件示例</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[mysqld]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">innodb_data_file_path </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ibdata1:12M:autoextend</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一旦分配无法收缩（即使删除数据）</li><li>MySQL 8.0将用户表的Undo Log移出系统表空间</li></ul></li></ul><h4 id="_3-1-2-独立表空间-file-per-table-tablespace" tabindex="-1"><a class="header-anchor" href="#_3-1-2-独立表空间-file-per-table-tablespace"><span>3.1.2 独立表空间 (File-Per-Table Tablespace)</span></a></h4><ul><li><p>**作用：**相比于系统表空间，独立表空间呢，能让我们更灵活地管理数据。比如你可以把某个表的数据和索引单独放在独立表空间，这样在备份、恢复或者迁移数据的时候就更方便，还能避免系统表空间过大导致的性能问题。简单说，系统表空间像 “大管家” 负责整体事务，独立表空间是 “小助手”，提供个性化服务啦。</p></li><li><p><strong>文件标识</strong>：<code>表名.ibd</code>（位于数据库目录下）</p></li><li><p><strong>核心组成</strong>：</p><ul><li>单表的全部数据+索引</li><li>表元数据（如表空间ID、索引根页指针）</li></ul></li><li><p><strong>使用时机</strong>：</p><ul><li><strong>默认启用</strong>（<code>innodb_file_per_table=ON</code>）</li><li>需要表压缩、传输表空间或快速<code>TRUNCATE TABLE</code>时</li></ul></li><li><p><strong>优势</strong>：</p><ul><li><strong>空间回收</strong>：<code>DROP TABLE</code>直接删除.ibd文件</li><li><strong>备份灵活</strong>：支持可传输表空间</li><li><strong>多线程清理</strong>：删除表时不会锁整个系统表空间</li></ul></li><li><p><strong>监控</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> information_schema</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">INNODB_TABLESPACES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NAME</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> LIKE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%test/t1%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 格式：数据库名/表名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-1-3-通用表空间-general-tablespace" tabindex="-1"><a class="header-anchor" href="#_3-1-3-通用表空间-general-tablespace"><span>3.1.3 通用表空间 (General Tablespace)</span></a></h4><ul><li><p><strong>作用</strong>：通用表空间可以看作是系统表空间和独立表空间的一个折中方案啦。它能像独立表空间那样，把数据和索引存储在单独的文件里，方便管理和维护。同时呢，又能支持多个表共享同一个表空间，多个小表可以把数据都放在里面，大家一起用这个存储空间，这样能更合理地利用磁盘，节省磁盘空间。在一些特定场景下，比如多个小表共享存储资源的时候，通用表空间就挺有用的。</p></li><li><p><strong>文件标识</strong>：用户自定义（如<code>shared_space.ibd</code>）</p></li><li><p><strong>核心组成</strong>：</p><ul><li>多个表的共享存储池</li><li>支持所有行格式（包括<code>COMPRESSED</code>）</li></ul></li><li><p><strong>使用时机</strong>：</p><ul><li>合并存储多个表，减少小文件碎片</li><li>需要表压缩但文件系统块大小不足时</li></ul></li><li><p><strong>操作示例</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 创建通用表空间</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLESPACE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shared_space</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">` </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  ADD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DATAFILE </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;shared_space.ibd&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  FILE_BLOCK_SIZE </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 16K;  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 指定块大小</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-- 将表加入通用表空间</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) TABLESPACE </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`shared_space`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t2 TABLESPACE </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`shared_space`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>限制</strong>：</p><ul><li>不支持临时表</li><li>表移动后无法直接返回独立表空间</li></ul></li></ul><h4 id="_3-1-4-撤销表空间-undo-tablespaces" tabindex="-1"><a class="header-anchor" href="#_3-1-4-撤销表空间-undo-tablespaces"><span>3.1.4 撤销表空间 (Undo Tablespaces)</span></a></h4><figure><img src="'+k+'" alt="1751714434412" tabindex="0" loading="lazy"><figcaption>1751714434412</figcaption></figure><ul><li><p><strong>作用</strong>：存储的是undo log 文件。当事务执行回滚操作时，就会从撤销表空间读取 undo log 里的信息，把数据恢复到事务开始前的状态。而且，它还能保证事务的一致性和隔离性呢。</p></li><li><p>文件标识：<code>undo_001</code>, <code>undo_002</code>（默认）</p></li><li><p><strong>使用时机</strong>：</p><ul><li>所有用户事务的Undo Log存储</li><li>需要长时间运行的事务或高并发写负载</li></ul></li><li><p><strong>关键特性</strong>：</p><ul><li><p>默认创建2个，可在线动态增加：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> UNDO TABLESPACE undo_003 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ADD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DATAFILE </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;undo_003.ibu&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>自动截断：当表空间超过<code>innodb_max_undo_log_size</code>后清理</p></li><li><p>状态管理：<code>ACTIVE</code>/<code>INACTIVE</code></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> UNDO TABLESPACE undo_003 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> INACTIVE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>监控：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">STATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> INFORMATION_SCHEMA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">INNODB_TABLESPACES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NAME</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> LIKE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%undo%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-1-5-临时表空间-temporary-tablespace" tabindex="-1"><a class="header-anchor" href="#_3-1-5-临时表空间-temporary-tablespace"><span>3.1.5 临时表空间 (Temporary Tablespace)</span></a></h4><ul><li><p><strong>作用</strong>：当查询中用到临时表，像做排序、分组或者创建临时视图的时候，就会用到它。还有在处理复杂查询、创建临时中间结果时，也会用到临时表空间。它能避免占用系统表空间，提高查询效率呢。</p></li><li><p><strong>文件标识</strong>：</p><ul><li>用户临时表空间：<code>ibtmp1</code></li><li>会话临时表空间：<code>#innodb_temp/temp_*.ibt</code></li></ul></li><li><p><strong>核心组成</strong>：</p><ul><li>会话临时表数据</li><li>内部临时表（如排序缓冲区）</li></ul></li><li><p><strong>使用时机</strong>：</p><ul><li>执行需要磁盘临时表的查询</li><li>用户创建临时表（<code>CREATE TEMPORARY TABLE</code>）</li></ul></li><li><p><strong>关键特性</strong>：</p><ul><li>动态收缩：重启MySQL自动重建ibtmp1</li><li>会话级优化：会话退出自动清理</li></ul></li><li><p><strong>配置</strong>：</p><div class="language-ini line-numbers-mode" data-highlighter="shiki" data-ext="ini" data-title="ini" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">innodb_temp_data_file_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> ibtmp1:12M:autoextend:max:5G</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>监控</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FILE_NAME, TABLESPACE_NAME, ENGINE, INITIAL_SIZE </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> INFORMATION_SCHEMA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">FILES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FILE_NAME </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">LIKE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%ibtmp%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-1-6-其他表空间" tabindex="-1"><a class="header-anchor" href="#_3-1-6-其他表空间"><span>3.1.6 其他表空间</span></a></h4><ul><li><strong>Redo Log表空间</strong>（8.0.30+）： <ul><li>替代传统的ib_logfile*</li><li>存储在<code>#innodb_redo</code>目录</li><li>支持动态调整数量和大小</li></ul></li><li><strong>MySQL数据字典表空间</strong>： <ul><li><code>mysql.ibd</code>文件</li><li>存储数据字典表（如tables、columns）</li></ul></li><li><strong>全局临时表空间</strong>： <ul><li>存储<code>CREATE TEMPORARY TABLE</code>创建的全局临时表</li></ul></li></ul><h3 id="_3-2-redo-log-redo-log-files" tabindex="-1"><a class="header-anchor" href="#_3-2-redo-log-redo-log-files"><span>3.2 Redo Log（Redo Log Files）</span></a></h3><figure><img src="'+f+'" alt="1751714600637" tabindex="0" loading="lazy"><figcaption>1751714600637</figcaption></figure><figure><img src="'+_+'" alt="1755258085563" tabindex="0" loading="lazy"><figcaption>1755258085563</figcaption></figure><p><strong>作用</strong>：就是在数据库执行过程中记录数据修改结果，在数据库发生故障时通过恢复这些记录来保证数据的完整性和一致性。</p><h4 id="_3-2-1-执行流程" tabindex="-1"><a class="header-anchor" href="#_3-2-1-执行流程"><span>3.2.1 执行流程</span></a></h4><p><strong>流程</strong>：重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。 记录的是<strong>修改后的结果数据</strong>。</p><p>该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file）,前者是在内存中，</p><p>后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中, 用 于在刷新脏页到磁盘,发生错误时, 进行</p><p>数据恢复使用。</p><p>如果没有redolog，可能会存在什么问题的？ 我们一起来分析一下。我们知道，在InnoDB引擎中的内存结构中，主</p><p>要的内存区域就是缓冲池，在缓冲池中缓存了很多的数据页。 当我们在一个事务中，执行多个增删改的操作时，</p><p>InnoDB引擎会先操作缓冲池中的数据，如果缓冲区没有对应的数据，会通过后台线程将磁盘中的数据加载出来，</p><p>存放在缓冲区中，然后将缓冲池中 的数据修改，修改后的数据页我们称为脏页。 而脏页则会在一定的时机，通过</p><p>后台线程刷新到磁盘 中，从而保证缓冲区与磁盘的数据一致。 而缓冲区的脏页数据并不是实时刷新的，而是一段</p><p>时间之后 将缓冲区的数据刷新到磁盘中，假如刷新到磁盘的过程出错了，而提示给用户事务提交成功，而数据却</p><p>没有持久化下来，这就出现问题了，没有保证事务的持久性。</p><figure><img src="'+v+'" alt="1751790945089" tabindex="0" loading="lazy"><figcaption>1751790945089</figcaption></figure><p>那么，如何解决上述的问题呢？ 在InnoDB中提供了一份日志 redo log，接下来我们再来分析一 下，通过redolog如何解决这个问题。</p><figure><img src="'+m+'" alt="1751790921127" tabindex="0" loading="lazy"><figcaption>1751790921127</figcaption></figure><p>有了redolog之后，当对缓冲区的数据进行增删改之后，会首先将操作的数据页的变化，记录在redo log buffer中。</p><p>在事务提交时，会将redo log buffer中的数据刷新到redo log磁盘文件中。</p><p>过一段时间之后，如果刷新缓冲区的脏页到磁盘时，发生错误，此时就可以借助于redo log进行数据恢复，这样就</p><p>保证了事务的持久性。 而如果脏页成功刷新到磁盘 或 或者涉及到的数据已经落盘，此时redolog就没有作用了，</p><p>就可以删除了，所以存在的<strong>两个redolog文件是循环写</strong>的。</p><h4 id="_3-2-2-组成结构" tabindex="-1"><a class="header-anchor" href="#_3-2-2-组成结构"><span>3.2.2 组成结构</span></a></h4><ol><li>日志记录格式（物理逻辑日志）</li></ol><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 示例</span></span>\n<span class="line"><span>LSN=12345678 | TRX_ID=789 | SPACE_ID=5 | PAGE_NO=1023 | OP=UPDATE | OFFSET=60 | DATA=&quot;Alice→Bob&quot;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>// 数据组成</span></span>\n<span class="line"><span>| LSN(8B) | 事务ID(6B) | 表空间ID(4B) | 页号(4B) | 操作类型(1B) | 数据偏移(2B) | 修改数据(...) |</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>关键字段解析</li></ol><table><thead><tr><th>字段</th><th>作用</th><th>类比解释</th></tr></thead><tbody><tr><td><strong>LSN</strong></td><td>日志序列号（全局递增）</td><td>操作的时间戳+流水号</td></tr><tr><td><strong>TRX_ID</strong></td><td>产生日志的事务ID</td><td>操作责任人工号</td></tr><tr><td><strong>SPACE_ID</strong></td><td>表空间ID（哪个数据库文件）</td><td>仓库编号</td></tr><tr><td><strong>PAGE_NO</strong></td><td>数据页号（文件内位置）</td><td>仓库的货架编号</td></tr><tr><td><strong>OP</strong></td><td>操作类型（INSERT/UPDATE等）</td><td>操作类型（入库/出库）</td></tr><tr><td><strong>DATA</strong></td><td>修改前后的数据差异</td><td>货物变更清单</td></tr></tbody></table><h4 id="_3-2-3-刷盘时机" tabindex="-1"><a class="header-anchor" href="#_3-2-3-刷盘时机"><span>3.2.3 刷盘时机</span></a></h4><p>配置 <strong>innodb_flush_log_at_trx_commit</strong> 参数，可以设置事务提交时的刷盘方式</p><ul><li><p><strong>0</strong> ：当该系统变量值为0时，表示在事务提交时不立即向磁盘中同步 redo 日志，这个任务是交给后台线程 做的。 这样很明显会加快请求处理速度，但是如果事务提交后服务器挂了，后台线程没有及时将 redo 日志刷新到 磁盘，那么该事务对页面的修改会丢失。</p></li><li><p><strong>1</strong> ：当该系统变量值为1时，表示在事务提交时需要将 redo 日志同步到磁盘，可以保证事务的 持久性 。 1 也是 innodb_flush_log_at_trx_commit 的默认值。</p></li><li><p><strong>2</strong> ：当该系统变量值为2时，表示在事务提交时需要将 redo 日志写到操作系统的page cache中，但并不需要保 证将日志真正的刷新到磁盘。 这种情况下如果数据库挂了，操作系统没挂的话，事务的 持久性 还是可以保证的，但是操作系统也挂了的 话，那就不能保证 持久性 了。</p><p>一般我们都配1，保证持久性。</p></li></ul><h4 id="_3-2-4-崩溃恢复" tabindex="-1"><a class="header-anchor" href="#_3-2-4-崩溃恢复"><span>3.2.4 崩溃恢复</span></a></h4><p>故障恢复时，第一步是扫描 redo log 文件。从最近的 Checkpoint 记录开始，找到所有在 <strong>Checkpoint</strong> 之后修改的数据。把这些redolog中对应的页，再拉到缓存来，然后通过<strong>redolog把这些缓存变成脏页</strong>，之前的数据恢复到buffer poll。然后再根据<strong>undolog</strong>来判断对应的事务是提交还是回滚，主要取决于undolog中的状态是prepare还是commit。如果是prepare，看看binlog写成功了没，如果成功了，就还是能提交。</p><h4 id="_3-2-5-存储模式" tabindex="-1"><a class="header-anchor" href="#_3-2-5-存储模式"><span>3.2.5 存储模式</span></a></h4><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>        写指针</span></span>\n<span class="line"><span>          ↓</span></span>\n<span class="line"><span>[Log File 1][Log File 2][Log File 3]</span></span>\n<span class="line"><span>  ↑             ↑</span></span>\n<span class="line"><span>  |_____________|</span></span>\n<span class="line"><span>     已覆盖区域</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当写满最后一个文件时，回到第一个文件覆盖写入 . 覆盖区域对应的脏页必须已刷盘（Checkpoint 已推进）</p><p>Redo Log 设计精髓总结</p><ol><li><strong>顺序写加速</strong>：将随机IO转换为顺序IO</li><li><strong>日志先行原则</strong>：先保证操作可重放，再实际修改数据</li><li><strong>崩溃恢复三件套</strong>： <ul><li>Checkpoint（安全基点）</li><li>Redo（重做未刷盘操作）</li><li>Undo（回滚未提交事务）</li></ul></li><li><strong>循环复用空间</strong>：通过推进Checkpoint覆盖旧日志</li></ol><h3 id="_3-3-undo-log" tabindex="-1"><a class="header-anchor" href="#_3-3-undo-log"><span>3.3 Undo Log</span></a></h3><p>在 MySQL 8.0 之前，Undo Log 像地下室杂物一样堆积在系统表空间（ibdata1）的角落。8.0 之后它终于拥有了</p><p>独立表空间——专用的 <strong>Undo 表空间</strong>（如 undo_001.ibu）。每个表空间被划分为 128 个回滚段（Rollback</p><p>Segment），每个回滚段就像药柜的 1024 个抽屉（Undo Slot），每个抽屉存放着特定事务的&quot;后悔记录&quot;。</p><p>记录的是<strong>数据修改之前的旧值</strong></p><h4 id="_3-3-1-存储格式" tabindex="-1"><a class="header-anchor" href="#_3-3-1-存储格式"><span>3.3.1 存储格式</span></a></h4><p>每条 Undo 记录都像是一份<strong>数据遗嘱</strong>，包含三大关键部分：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 事务身份证：TRX_ID（谁修改了我）</span></span>\n<span class="line"><span>2. 回溯指针：ROLL_PTR（指向上个版本的位置）</span></span>\n<span class="line"><span>3. 前镜像数据：被修改前的完整数据副本</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>链式存储</strong>：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>当前数据 → [TRX_ID=100, ROLL_PTR=0x123] </span></span>\n<span class="line"><span>             ↓  </span></span>\n<span class="line"><span>历史版本 → [TRX_ID=80, ROLL_PTR=0x456] </span></span>\n<span class="line"><span>             ↓  </span></span>\n<span class="line"><span>原始版本 → NULL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当事务开始，就会生成一系列 Undo log，记录这个事务对数据的修改。这些记录按操作顺序连成<strong>链表</strong>。通过事务 ID 就能找到该事务对应的 Undo log 链表，回滚时按链表顺序处理就行啦。一个事务对应一个 Undo log 链表</p><p>Undo log 链表根据操作类型分为多种类型</p><ul><li><strong>INSERT 型</strong>：插入操作生成的 Undo log，会记录插入前表的状态，这样回滚时就能知道怎么把插入的数据撤销</li><li><strong>UPDATE 型</strong>：会记录删除前的数据，方便回滚时恢复被删除的数据</li><li><strong>DELETE 型</strong>：更新操作的 Undo log 就记录更新前的数据值，用于回滚时将数据恢复成原来的样子</li></ul><h4 id="_3-3-2-执行流程" tabindex="-1"><a class="header-anchor" href="#_3-3-2-执行流程"><span>3.3.2 执行流程</span></a></h4><p>当执行更新语句时，首先会在 Buffer Pool 中创建一个事务，然后 InnoDB 在 <strong>Undo log 缓冲区</strong>中为这个事务分配</p><p>空间，记录下这次更新前的数据快照，也就是旧数据啦。接着呢，才会在 Buffer Pool 的对应数据页上进行实际的</p><p>修改，这时数据页就变成脏页了。</p><p>如果这时候要回滚事务，InnoDB 会从 Undo log 缓冲区中读取之前记录的旧数据快照。要是缓冲区中的数据已经</p><p>被刷新到磁盘的 <strong>Undo log</strong> 文件里了，那就从文件里读取。然后按照记录的顺序，将数据页恢复到更新前的状态，</p><p>把数据改回去。等回滚完成后，Undo log 占用的<strong>缓冲区空间会被释放</strong>，等待下一次使用。</p><p>Undo log 日志会被写入同一个文件 那么如何我想回滚一条数据操作 怎么找到对应的Undo log日志呢？</p><p>不用担心 Undo log 日志的<strong>头信息中会存储事务ID</strong> 根据事务ID 找到对应的日志及数据进行回滚</p><h4 id="_3-3-3-刷盘时机" tabindex="-1"><a class="header-anchor" href="#_3-3-3-刷盘时机"><span>3.3.3 刷盘时机</span></a></h4><ol><li>事务提交时的刷盘逻辑</li></ol><ul><li><ul><li><strong>依赖 Redo Log 的持久化</strong>： Undo Log 的修改本身会先记录到 <strong>Redo Log</strong>（通过 <code>WAL</code> 机制），事务提交时若 Redo Log 强制刷盘（如 <code>innodb_flush_log_at_trx_commit=1</code>），则 Undo Log 的变更也间接持久化。 <em>（崩溃恢复时，通过 Redo Log 重建 Undo Log 数据）</em></li><li><strong>Undo 表空间的延迟刷盘</strong>： Undo Log 的物理页（存储于独立 Undo 表空间或系统表空间）的刷盘由 <strong>Checkpoint 机制</strong>触发，与普通数据页类似，由后台线程异步刷盘，<strong>不阻塞事务提交</strong>。</li></ul></li></ul><ol><li>非事务提交场景的刷盘</li></ol><ul><li><ul><li><p><strong>Undo Log 空间不足</strong>：</p><p>当 Undo 表空间剩余容量不足时（innodb_max_undo_log_size）控制，InnoDB 会强制将部分 Undo 页刷盘以释放空间。</p></li><li><p><strong>后台线程定期清理</strong>：</p><p>Purge 线程根据事务提交状态清理过期 Undo Log，可能触发部分页的刷盘。</p></li></ul></li></ul><h4 id="_3-3-4-崩溃恢复" tabindex="-1"><a class="header-anchor" href="#_3-3-4-崩溃恢复"><span>3.3.4 崩溃恢复</span></a></h4><ol><li><p><strong>Redo阶段重建Undo Log</strong></p><p>崩溃恢复<strong>首先重做Redo Log</strong>，恢复包括数据页和<strong>Undo页</strong>的所有变更。</p></li></ol><ul><li><ul><li><strong>关键点</strong>：Undo Log的写入本身受Redo Log保护（WAL机制），因此崩溃时Undo页的修改可能未落盘，需通过Redo Log重建其完整状态。</li></ul></li></ul><ol start="2"><li><strong>Undo阶段：回滚未提交事务</strong><ol><li>事务状态判定 <ul><li>通过系统表空间的<strong>事务系统段</strong>（Transaction System）读取活跃事务列表，确认崩溃时哪些事务未提交（状态为<code>ACTIVE</code>或<code>PREPARED</code>）。</li><li><strong>依据</strong>：事务的<code>trx_id</code>和事务状态标志，持久化在Undo Log头部。</li></ul></li><li>构造回滚链 <ul><li>每条数据行记录的隐藏字段<code>roll_pointer</code>指向最近的Undo Log记录，形成版本链。</li><li>未提交事务的Undo Log按操作逆序链接（如INSERT的Undo需执行DELETE，UPDATE需还原旧值）。</li></ul></li><li>逐事务回滚 <ol><li><strong>反向扫描Undo Log</strong>：从未提交事务的最后一条Undo记录开始，按操作类型执行逆操作： <ul><li><strong>INSERT</strong> → 删除新插入的行（标记为删除）。</li><li><strong>DELETE</strong> → 重新插入被删除的行。</li><li><strong>UPDATE</strong> → 将数据还原为旧值。</li></ul></li></ol></li></ol></li></ol><ul><li>​ 2. <strong>原子性保证</strong>：回滚过程中发生二次崩溃可通过Redo Log重新恢复流程。</li></ul><p><strong>总结：Undo Log 的设计哲学</strong></p><ol><li><strong>空间换时间</strong>：用存储旧版本换取非锁定读的高并发</li><li><strong>按需回溯</strong>：通过精巧的 ReadView 避免全局扫描</li><li><strong>分层清理</strong>：Purge 机制平衡空间复用与数据安全</li><li><strong>生命自管理</strong>：独立表空间实现自闭环控制</li></ol><h3 id="_3-4-双写缓冲区-doublewrite-buffer" tabindex="-1"><a class="header-anchor" href="#_3-4-双写缓冲区-doublewrite-buffer"><span>3.4 双写缓冲区(Doublewrite Buffer )</span></a></h3><p>一、致命问题：页断裂（Partial Page Write）——数据库的「断臂危机」</p><p>想象你正在向银行金库运送一箱钞票（16KB的数据页）。当搬运工（磁盘IO）走到一半时，地震突然发生（系统崩溃）。结果：</p><ul><li>📦 <strong>箱子摔裂</strong>：部分钞票在旧位置，部分在新位置</li><li>🔢 <strong>校验和失效</strong>：箱子标签的数字对不上内容</li><li>💸 <strong>资金损失</strong>：银行无法确认到底丢了多少钱</li></ul><p>这就是 <strong>页断裂</strong>——16KB的页只写了部分内容（如8KB）到磁盘。传统校验和能<strong>发现</strong>损坏，但无法<strong>修复</strong>。而双写缓冲区正是为解决此问题而生！</p><p><strong>作用：就是为了更加安全的数据写入防止因为事故导致的数据丢失</strong></p><h4 id="_3-4-1-执行流程" tabindex="-1"><a class="header-anchor" href="#_3-4-1-执行流程"><span>3.4.1 执行流程</span></a></h4><ol><li><p>脏页的「安全寄存处」</p><p>当需要把内存中的脏页刷到磁盘时：</p><ol><li>不直接写入用户表空间</li><li>先复制到双写缓冲区的内存区域（连续内存块）</li><li>将这批脏页 <strong>顺序写入</strong> 双写区（磁盘上的保留区域）</li><li>再将脏页 <strong>分散写入</strong> 实际的数据文件位置</li><li>磁盘控制器确认两次写入完成</li></ol><p>✅ <strong>关键优势</strong>：</p><ul><li><strong>顺序写</strong>：刷脏盘时因为随机IO 时间会慢 通过双写缓冲区顺序写入 时间效率会很高从而实现备份 这也是数据丢失的安全防范</li><li><strong>原子性</strong>：512B小块的写入保证断电不会半途而废</li></ul></li></ol><h4 id="_3-4-2-崩溃恢复" tabindex="-1"><a class="header-anchor" href="#_3-4-2-崩溃恢复"><span>3.4.2 崩溃恢复</span></a></h4><ol><li>定位损坏页的表空间ID + 页号</li><li>到双写区查找对应页的备份副本</li><li>将副本覆盖写入损坏页位置</li><li>重新应用Redo Log修复数据</li></ol><p>物理写入的本质风险</p><ul><li><strong>磁盘扇区大小（512B/4K）</strong> &lt;&lt; <strong>InnoDB页（16KB）</strong> 写1页需要多次磁盘操作，崩溃必然导致中间状态</li><li><strong>校验和的局限性</strong>： <code>CHECKSUM = 12345</code> ➔ 能发现损坏，但不知道原来是什么</li></ul><p>双写区的特殊结构</p><ul><li><strong>连续空间</strong>：位于系统表空间（ibdata）或独立文件</li><li><strong>批量处理</strong>：每次收集128页（2MB）后整体写入</li><li><strong>无校验和</strong>：双写副本是原始比特流，不做校验干扰</li></ul><p><strong>若事务持续不提交：</strong></p><ul><li><p>脏页滞留内存无法刷盘</p></li><li><p>双写区副本保留过久</p></li><li><p>导致磁盘空间占用增加</p><p><strong>解决方案</strong>：监控 <code>SHOW ENGINE INNODB STATUS</code> 中的脏页数量</p></li></ul><h4 id="_3-4-3-总结" tabindex="-1"><a class="header-anchor" href="#_3-4-3-总结"><span>3.4.3 总结</span></a></h4><p>为什么说双写不可或缺？</p><ol><li><p><strong>解决无解难题</strong>：页断裂是磁盘物理特性导致的必然风险</p></li><li><p><strong>成本效益之王</strong>：10%性能代价换取100%可恢复性</p></li><li><p><strong>与Redo Log协同作战</strong>：</p><ul><li>Redo Log 保证事务完整性（<strong>操作不丢</strong>）</li><li>Doublewrite 保证数据完整性（<strong>页面不坏</strong>）</li></ul></li><li><p><strong>数据库的终极底线</strong>：</p><blockquote><p>“宁可写入慢一点，绝不丢失一块钱”</p></blockquote></li></ol><p>最后用快递比喻总结：</p><ul><li><strong>用户表空间</strong> = 客户收货地址（可能因地址错误丢件）</li><li><strong>双写缓冲区</strong> = 快递公司的区域仓库（所有货物先存此处）</li><li><strong>双重配送</strong>： <ol><li>集中送仓库（安全库存）</li><li>分散送客户（最终交付）</li></ol></li><li><strong>货物损坏</strong>时，从仓库调备份重新发货（崩溃恢复）</li></ul><p>理解了双写缓冲区，就掌握了InnoDB对抗物理世界不确定性的终极武器！</p>',303),L={},D=(0,l(66262).A)(L,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,[A,B,(0,n.Q3)(" more "),y])}]]),T=JSON.parse('{"path":"/program/mysql/Mysql%E6%A1%86%E6%9E%B6.html","title":"Mysql架构","lang":"zh-CN","frontmatter":{"totail":null,"icon":"book","date":"2024-10-01T00:00:00.000Z","category":["编程"],"tag":["Mysql"],"description":"架构组成如此精妙，层层设计深入人心","head":[["meta",{"property":"og:url","content":"https://github.com/DUDU-dudu-DUDU/xwblog/xwblog/program/mysql/Mysql%E6%A1%86%E6%9E%B6.html"}],["meta",{"property":"og:site_name","content":"小吴 Blog"}],["meta",{"property":"og:title","content":"Mysql架构"}],["meta",{"property":"og:description","content":"架构组成如此精妙，层层设计深入人心"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-31T03:13:03.000Z"}],["meta",{"property":"article:author","content":"xiaowu"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:published_time","content":"2024-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-31T03:13:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mysql架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-31T03:13:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaowu\\",\\"url\\":\\"https://dudu-dudu-dudu.github.io/xwblog/zh/\\"}]}"]]},"headers":[{"level":2,"title":"1. server层核心","slug":"_1-server层核心","link":"#_1-server层核心","children":[{"level":3,"title":"Server 层核心组件与缓存区","slug":"server-层核心组件与缓存区","link":"#server-层核心组件与缓存区","children":[]}]},{"level":2,"title":"2. Binlog","slug":"_2-binlog","link":"#_2-binlog","children":[{"level":3,"title":"2.1 作用","slug":"_2-1-作用","link":"#_2-1-作用","children":[]},{"level":3,"title":"2.2 写入时机","slug":"_2-2-写入时机","link":"#_2-2-写入时机","children":[]},{"level":3,"title":"2.3 关键参数","slug":"_2-3-关键参数","link":"#_2-3-关键参数","children":[]},{"level":3,"title":"2.4 数据格式","slug":"_2-4-数据格式","link":"#_2-4-数据格式","children":[]},{"level":3,"title":"2.5 主从复制","slug":"_2-5-主从复制","link":"#_2-5-主从复制","children":[]}]},{"level":2,"title":"3 Sever层优化","slug":"_3-sever层优化","link":"#_3-sever层优化","children":[{"level":3,"title":"3.1 join_buffer","slug":"_3-1-join-buffer","link":"#_3-1-join-buffer","children":[]},{"level":3,"title":"3.2 sort_buffer","slug":"_3-2-sort-buffer","link":"#_3-2-sort-buffer","children":[]}]},{"level":2,"title":"1. 内存结构","slug":"_1-内存结构","link":"#_1-内存结构","children":[{"level":3,"title":"1.1 Buffer Poll","slug":"_1-1-buffer-poll","link":"#_1-1-buffer-poll","children":[]},{"level":3,"title":"1.2  Log Buffer","slug":"_1-2-log-buffer","link":"#_1-2-log-buffer","children":[]}]},{"level":2,"title":"2. 后台线程","slug":"_2-后台线程","link":"#_2-后台线程","children":[{"level":3,"title":"2.1 Master Thread（主线程）","slug":"_2-1-master-thread-主线程","link":"#_2-1-master-thread-主线程","children":[]},{"level":3,"title":"2.2 IO Threads（I/O 线程）","slug":"_2-2-io-threads-i-o-线程","link":"#_2-2-io-threads-i-o-线程","children":[]},{"level":3,"title":"2.3 Page Cleaner Thread（刷脏线程）","slug":"_2-3-page-cleaner-thread-刷脏线程","link":"#_2-3-page-cleaner-thread-刷脏线程","children":[]},{"level":3,"title":"2.4 Purge Thread（清理线程）","slug":"_2-4-purge-thread-清理线程","link":"#_2-4-purge-thread-清理线程","children":[]},{"level":3,"title":"2.5 线程之间的协同","slug":"_2-5-线程之间的协同","link":"#_2-5-线程之间的协同","children":[]}]},{"level":2,"title":"3. 磁盘结构","slug":"_3-磁盘结构","link":"#_3-磁盘结构","children":[{"level":3,"title":"3.1 表空间（Tablespaces）","slug":"_3-1-表空间-tablespaces","link":"#_3-1-表空间-tablespaces","children":[]},{"level":3,"title":"3.2 Redo Log（Redo Log Files）","slug":"_3-2-redo-log-redo-log-files","link":"#_3-2-redo-log-redo-log-files","children":[]},{"level":3,"title":"3.3 Undo Log","slug":"_3-3-undo-log","link":"#_3-3-undo-log","children":[]},{"level":3,"title":"3.4 双写缓冲区(Doublewrite Buffer )","slug":"_3-4-双写缓冲区-doublewrite-buffer","link":"#_3-4-双写缓冲区-doublewrite-buffer","children":[]}]}],"git":{"createdTime":1756609983000,"updatedTime":1756609983000,"contributors":[{"name":"DUDU","email":"930824238@qq.com","commits":1}]},"readingTime":{"minutes":48.19,"words":14458},"filePathRelative":"program/mysql/Mysql框架.md","localizedDate":"2024年10月1日","excerpt":"\\n<p>架构组成如此精妙，层层设计深入人心</p>\\n","autoDesc":true}')}}]);