"use strict";(self.webpackChunkxwblog=self.webpackChunkxwblog||[]).push([[3600],{6262:(t,e)=>{e.A=(t,e)=>{const n=t.__vccOpts||t;for(const[t,a]of e)n[t]=a;return n}},7268:(t,e,n)=>{n.r(e),n.d(e,{comp:()=>i,data:()=>s});var a=n(641);const o=(0,a.Fv)('<h1 id="循环依赖" tabindex="-1"><a class="header-anchor" href="#循环依赖"><span>循环依赖</span></a></h1><h2 id="循环依赖-1" tabindex="-1"><a class="header-anchor" href="#循环依赖-1"><span>循环依赖</span></a></h2><blockquote><p>首先了解一下spring初始化的流程，单例Bean初始化完成，要经历三步 <strong>实例化</strong> <strong>属性赋值</strong> <strong>初始化</strong>。</p></blockquote>',3),r=(0,a.Fv)('<p>在spring中，a依赖b，b依赖c，c依赖a，形成了一个闭环。在这种情况下，初始化任意一个bean，都会导致最终又依赖回自己，导致初始化失败。</p><p>Spring 通过<strong>三级缓存</strong>解决了循环依赖：</p><ol><li>一级缓存 : Map&lt;String,Object&gt; singletonObjects，成品对象单例池，用于保存实例化、属性赋值（注入）、初始化完成的 bean 实例</li><li>二级缓存 : Map&lt;String,Object&gt; earlySingletonObjects，早期曝光对象，用于保存实例化完成的 bean 实例</li><li>三级缓存 : Map&lt;String,ObjectFactory&lt;?&gt;&gt; singletonFactories，早期曝光对象工厂，用于保存 bean 创建工厂，以便于后面扩展有机会创建代理对象。</li></ol><h5 id="二级缓存作用" tabindex="-1"><a class="header-anchor" href="#二级缓存作用"><span><strong>二级缓存作用</strong></span></a></h5><p><strong>循环依赖加载流程</strong>：</p><ol><li><p>A实例化成功</p></li><li><p>A把自己的对象工厂保存在三级缓存</p></li><li><p>A属性赋值依赖了B</p></li><li><p>B实例化成功</p></li><li><p>B把自己对象工厂保存在三级缓存</p></li><li><p>B属性赋值依赖了A，这时候B调用的是复用的getSingleton（beanName）方法。</p></li></ol><p>这时候一级二级都找不到。会找到三级缓存，然后调用对象工厂的获取对象方法，获取到代理后（也可能没代理）对象。把代理对象放到二级缓存中，删除三级缓存。然后返回对应的代理对象。这样B就能成功把A赋值进去了。</p><p>之后如果C也依赖了A，也能在二级缓存找到这个代理对象。一直到A自身初始化完毕，会将自己放入一级缓存，同时删除二级缓存。</p><h5 id="一级缓存作用" tabindex="-1"><a class="header-anchor" href="#一级缓存作用"><span><strong>一级缓存作用</strong></span></a></h5><p>在获取对象的时候，会调用getSingleton（beanName）方法，从一级缓存获取bean。如果不存在，就会调用重载方法getSingleton（beanName，创建方法）创建bean后，把它设置回一级缓存</p><h5 id="三级缓存作用" tabindex="-1"><a class="header-anchor" href="#三级缓存作用"><span><strong>三级缓存作用</strong></span></a></h5><p>这里做了几件事，</p><ol><li><p>实例化对象</p></li><li><p>将对象的创建工厂保存在三级缓存</p></li><li><p>属性赋值</p></li><li><p>后置处理器</p></li></ol><p>这里就提前把自己的创建工厂暴露在三级缓存里了，如果出现循环依赖，其它的类就会在属性赋值的时候，从三级缓存取出这个工厂。</p><p>对象工厂是干嘛的，其实就是暴露一个早期对象。把所有实现了SmartInstantiationAwareBeanPostProcessor的后置处理器，提前运行。AOP就会提前在这里执行。这玩意就是为了解决循环依赖而生的</p><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h5><p><strong>一级缓存</strong>：存储成品对象</p><p><strong>二级缓存</strong>：存储半成品对象</p><p><strong>三级缓存</strong>：存储代理对象工厂（lambda表达式 -&gt; getEarlyReference的执行逻辑）</p>',19),p={},i=(0,n(6262).A)(p,[["render",function(t,e){return(0,a.uX)(),(0,a.CE)("div",null,[o,(0,a.Q3)(" more "),r])}]]),s=JSON.parse('{"path":"/program/java/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html","title":"循环依赖","lang":"zh-CN","frontmatter":{"icon":"dianjikai","date":"2024-06-01T00:00:00.000Z","category":["编程"],"tag":["spring"],"description":"循环依赖 首先了解一下spring初始化的流程，单例Bean初始化完成，要经历三步 实例化 属性赋值 初始化。","head":[["meta",{"property":"og:url","content":"https://github.com/DUDU-dudu-DUDU/xwblog/xwblog/program/java/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html"}],["meta",{"property":"og:site_name","content":"小吴 Blog"}],["meta",{"property":"og:title","content":"循环依赖"}],["meta",{"property":"og:description","content":"循环依赖 首先了解一下spring初始化的流程，单例Bean初始化完成，要经历三步 实例化 属性赋值 初始化。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-04T09:38:58.000Z"}],["meta",{"property":"article:author","content":"xiaowu"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:published_time","content":"2024-06-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-04T09:38:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"循环依赖\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-04T09:38:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaowu\\",\\"url\\":\\"https://dudu-dudu-dudu.github.io/xwblog/zh/\\"}]}"]]},"headers":[{"level":2,"title":"循环依赖","slug":"循环依赖-1","link":"#循环依赖-1","children":[]}],"git":{"createdTime":1733305138000,"updatedTime":1733305138000,"contributors":[{"name":"DJ033016","email":"wujianbo@djbx.com","commits":1}]},"readingTime":{"minutes":2.48,"words":743},"filePathRelative":"program/java/循环依赖.md","localizedDate":"2024年6月1日","excerpt":"\\n<h2>循环依赖</h2>\\n<blockquote>\\n<p>首先了解一下spring初始化的流程，单例Bean初始化完成，要经历三步 <strong>实例化</strong>  <strong>属性赋值</strong>   <strong>初始化</strong>。</p>\\n</blockquote>\\n","autoDesc":true}')}}]);