"use strict";(self.webpackChunkxwblog=self.webpackChunkxwblog||[]).push([[202],{66262:(l,i)=>{i.A=(l,i)=>{const t=l.__vccOpts||l;for(const[l,e]of i)t[l]=e;return t}},80372:(l,i,t)=>{t.r(i),t.d(i,{comp:()=>n,data:()=>u});var e=t(20641);const a=(0,e.Lk)("h1",{id:"内存结构",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#内存结构"},[(0,e.Lk)("span",null,"内存结构")])],-1),o=(0,e.Lk)("p",null,"jvm内存结构",-1),r=(0,e.Fv)("<ol><li><p>程序计数器</p><ul><li>记录下一条jvm指令的执行地址</li><li>线程是私有的</li><li>不会存在内存溢出</li></ul></li><li><p>虚拟机栈</p><ul><li>每个线程运行时所需的内存 称为虚拟机栈</li><li>每个栈由多个栈帧组成 对应每次方法调用时所占的内存</li><li>每个线程只有一个活动栈帧，对应着当前正在执行的那个方法</li><li><strong>排查cpu过高问题：</strong><ul><li>通过 top命令定位那个进程cpu过高</li><li>再通过ps H -eo pid,tid,%cpu | grep 进程id 查看该进程那个线程占用过高</li><li>再通过 jstack 进程Id 查看该进程下全部线程 通过转换成16机制 查看对应线程 确认问题代码</li></ul></li></ul></li><li><p>本地方法栈</p><ul><li>针对那些非java代码实现的方法 如c++方法 运行所占用的栈空间 native</li></ul></li><li><p>堆</p><ul><li>线程共享的 堆中的对象都要考虑线程安全问题</li><li>通过new关键字 创建的对象放在堆中</li><li>有垃圾回收机制</li><li><strong>堆内存诊断</strong><ul><li>jps 查看运行的java进程</li><li>再通过 jmap -heap 进程ID 可以查看堆内存占用情况</li><li>也可以通过图形界面工具协助排查问题 jvisualvm</li></ul></li></ul></li><li><p>方法区</p><ul><li>线程共享的</li><li>方法区只是一个规范（概念） 可以对其进行不同的实现（永久代 元空间） 可以在堆中 也可以不在</li><li>包含类Class的信息，类加载器，运行时常量池，StringTable <ul><li><strong>常量池</strong> 就是一张表，虚拟指令根据这张常量表找到要执行的类名，方法名，参数类型，字面量等信息</li><li><strong>运行时常量池</strong> 常量池是*.class文件中的，该类被加载，常量池中的信息就会放内存当中（运行时常量池），并把符合地址变成真实地址（真实的内存位置）</li></ul></li><li>StringTable <ul><li>常量池中的字符串仅是符号，第一次用到才变成对象</li><li>利用串池的机制，来避免重复创建字符串对象</li><li>字符串变量拼接的原理是StringBulider</li><li>字符串常量拼接的原理是编辑期的优化</li><li>可以使用intern方法，主动将串池中还没有的字符串对象放入串池</li><li>调优：-XX:StringTableSize=桶个数 ；考虑将字符串对象入池减少堆内存的使用（串池可以去重）</li></ul></li></ul></li><li><p>直接内存</p><ul><li>常用于NIO操作时，用于数据缓冲区</li><li>分配回收成本高，但读写性能高</li><li>不受JVM内存回收管理。</li></ul></li></ol>",1),p={},n=(0,t(66262).A)(p,[["render",function(l,i){return(0,e.uX)(),(0,e.CE)("div",null,[a,o,(0,e.Q3)(" more "),r])}]]),u=JSON.parse('{"path":"/program/java/jvm/%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.html","title":"内存结构","lang":"zh-CN","frontmatter":{"icon":"dianjikai","date":"2023-10-01T00:00:00.000Z","category":["编程"],"tag":["Java","JVM"],"description":"jvm内存结构","head":[["meta",{"property":"og:url","content":"https://github.com/DUDU-dudu-DUDU/xwblog/xwblog/program/java/jvm/%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"小吴 Blog"}],["meta",{"property":"og:title","content":"内存结构"}],["meta",{"property":"og:description","content":"jvm内存结构"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-25T12:17:01.000Z"}],["meta",{"property":"article:author","content":"xiaowu"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2023-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-25T12:17:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存结构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-25T12:17:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaowu\\",\\"url\\":\\"https://dudu-dudu-dudu.github.io/xwblog/zh/\\"}]}"]]},"headers":[],"git":{"createdTime":1740485821000,"updatedTime":1740485821000,"contributors":[{"name":"DUDU","email":"930824238@qq.com","commits":1}]},"readingTime":{"minutes":2.24,"words":673},"filePathRelative":"program/java/jvm/内存结构.md","localizedDate":"2023年10月1日","excerpt":"\\n<p>jvm内存结构</p>\\n","autoDesc":true}')}}]);